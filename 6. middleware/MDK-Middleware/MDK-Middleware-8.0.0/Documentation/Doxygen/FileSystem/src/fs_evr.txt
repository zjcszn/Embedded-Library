/**
\defgroup evr_gr Debug Events
\brief    Events generated by the File System
\details
The File System Component interfaces to the \urlout{Event-Recorder}
to provide event information which helps you to understand and analyse the component operation.

See \ref fs_debugging for details on how to configure the File System Component to support the \ref evr_gr in the Event Recorder.

@{
*/

/**
\defgroup evr_fscore FsCore: Core Management
\brief Events generated by File System - Core Management functions.
\details
The File System - Core management functions generate events that inform about the general drive status.
@{
*/
/**
\fn __STATIC_INLINE void EvrFsCore_sys_open (const char *name, int openmode)
\details
The event \b sys_open is generated when \ref stdio_routines "Standard I/O Routines" call the _sys_open retarget function.

\anchor fs_file_mode
The openmode parameter is a bitmap whose bits correspond directly to the ISO mode specification:
|Bit  |Description|
|:---:|-----------|
|0 | Request to open file in read mode |
|1 | Request to open file in binary mode |
|2 | Request to open file for update |
|4 | Request to open file in write more |
|8 | Request to open file in append mode |

\b Value in the Event Recorder shows:
  - \b name : file name buffer address.
  - \b openmode: open mode bitmap.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_sys_close (int fh)
\details
The event \b sys_close is generated when \ref stdio_routines "Standard I/O Routines" call the _sys_close retarget function.

\b Value in the Event Recorder shows:
  - \b fh : file handle number (see also \ref EvrFsCore_sys_handle_assign).
*/

/**
\fn __STATIC_INLINE void EvrFsCore_sys_write (int fh, const unsigned char *buf, unsigned int len)
\details
The event \b sys_write is generated when \ref stdio_routines "Standard I/O Routines" call the _sys_write retarget function.

\b Value in the Event Recorder shows:
  - \b fh : file handle number (see also \ref EvrFsCore_sys_handle_assign).
  - \b buf : data buffer address.
  - \b len : data length.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_sys_read (int fh, unsigned char *buf, unsigned int len)
\details
The event \b sys_read is generated when \ref stdio_routines "Standard I/O Routines" call the _sys_read retarget function.

\b Value in the Event Recorder shows:
  - \b fh : file handle number (see also \ref EvrFsCore_sys_handle_assign).
  - \b buf : data buffer address.
  - \b len : data length.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_sys_seek (int fh, long pos)
\details
The event \b sys_seek is generated when \ref stdio_routines "Standard I/O Routines" call the _sys_seek retarget function.

\b Value in the Event Recorder shows:
  - \b fh : file handle number (see also \ref EvrFsCore_sys_handle_assign).
  - \b pos : file cursor location.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_sys_flen (int fh)
\details
The event \b sys_flen is generated when \ref stdio_routines "Standard I/O Routines" call the _sys_flen retarget function.

\b Value in the Event Recorder shows:
  - \b fh : file handle number (see also \ref EvrFsCore_sys_handle_assign).
*/

/**
\fn __STATIC_INLINE void EvrFsCore_sys_handle_assign (const char *name, int fh)
\details
The event \b sys_handle_assign is generated when file handle number is assigned to a file name.

\anchor fs_file_handle_index
File handle number consists of File System type and file handle index. Bit representation is as follows:

|Bit  |Description|
|:---:|-----------|
|0:15 |File handle index    |
|16   |File handle is assigned to a file opened on a FAT file system |
|17   |File handle is assigned to a file opened on a EFS file system |

\b Value in the Event Recorder shows:
  - \b name : file name buffer address.
  - \b fh : file handle number.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_finit (const char *drive)
\details
The event \b finit is generated when the function \ref finit is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_funinit (const char *drive)
\details
The event \b funinit is generated when the function \ref funinit is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fmount (const char *drive)
\details
The event \b fmount is generated when the function \ref fmount is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_funmount (const char *drive)
\details
The event \b funmount is generated when the function \ref funmount is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fdelete (const char *path, const char *options)
\details
The event \b fdelete is generated when the function \ref fdelete is called.

\b Value in the Event Recorder shows:
  - \b path : hex value specifying the memory location of the file path string.
  - \b options : hex value specifying the memory location of the delete options string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_ffind (const char *pattern, fsFileInfo *info)
\details
The event \b ffind is generated when the function \ref ffind is called.

\b Value in the Event Recorder shows:
  - \b pattern : hex value specifying the memory location of the search pattern string.
  - \b info : hex value specifying the memory location of the file info structure.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_frename (const char *path, const char *newname)
\details
The event \b frename is generated when the function \ref frename is called.

\b Value in the Event Recorder shows:
  - \b path : hex value specifying the memory location of the file path string.
  - \b newname : hex value specifying the memory location of the new file name string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fattrib (const char *path, const char *attr)
\details
The event \b fattrib is generated when the function \ref fattrib is called.

\b Value in the Event Recorder shows:
  - \b path : hex value specifying the memory location of the file path string.
  - \b attr : hex value specifying the memory location of the attribute specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fpwd (const char *drive, char *buf, uint32_t len)
\details
The event \b fpwd is generated when the function \ref fpwd is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
  - \b buf : hex value specifying the data buffer memory location.
  - \b len : data buffer length.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fchdir (const char *path)
\details
The event \b fchdir is generated when the function \ref fchdir is called.

\b Value in the Event Recorder shows:
  - \b path : hex value specifying the memory location of the directory path string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fmkdir (const char *path)
\details
The event \b fmkdir is generated when the function \ref fmkdir is called.

\b Value in the Event Recorder shows:
  - \b path :  hex value specifying the memory location of the directory path string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_frmdir (const char *path, const char *options)
\details
The event \b frmdir is generated when the function \ref frmdir is called.

\b Value in the Event Recorder shows:
  - \b path :  hex value specifying the memory location of the directory path string.
  - \b options : hex value specifying the memory location of the remove options string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fchdrive (const char *drive)
\details
The event \b fchdrive is generated when the function \ref fchdrive is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_ffree (const char *drive)
\details
The event \b ffree is generated when the function \ref ffree is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fformat (const char *drive, const char *options)
\details
The event \b fformat is generated when the function \ref fformat is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
  - \b options : hex value specifying the memory location of format options string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fanalyse (const char *drive)
\details
The event \b fanalyse is generated when the function \ref fanalyse is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fcheck (const char *drive)
\details
The event \b fcheck is generated when the function \ref fcheck is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fdefrag (const char *drive)
\details
The event \b fdefrag is generated when the function \ref fdefrag is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fmedia (const char *drive)
\details
The event \b fmedia is generated when the function \ref fmedia is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_finfo (const char *drive, fsDriveInfo *info)
\details
The event \b finfo is generated when the function \ref finfo is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
  - \b info : hex value specifying the memory location of the drive info structure.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_fvol (const char *drive, char *label, uint32_t *serial)
\details
The event \b fvol is generated when the function \ref fvol  is called.

\b Value in the Event Recorder shows:
  - \b drive : hex value specifying the memory location of the drive specification string.
  - \b label : hex value specifying the memory location of the label buffer.
  - \b serial : hex value specifying the memory location of the 32-bit variable.
*/

/**
\fn __STATIC_INLINE void EvrFsCore_InvalidDrive (uint32_t drive)
\details
The event \b InvalidDrive is generated when an invalid or disabled drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsCore_CurrentDriveSelect (uint32_t drive)
\details
The event \b CurrentDriveSelect is generated when no drive is specified. In this case the current drive is used.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsCore_ftime_set (const char *path, fsTime *create, fsTime *access, fsTime *write)
\details
The event \b ftime_set is generated when the function \ref ftime_set is called.

\b Value in the Event Recorder shows:
  - \b path : hex value specifying the memory location of the file path string.
  - \b create : hex value specifying the memory location of the \ref fsTime structure containing create time information.
  - \b access : hex value specifying the memory location of the \ref fsTime structure containing last access time information.
  - \b write : hex value specifying the memory location of the \ref fsTime structure containing last write time information.
*/

/**
\fn  __STATIC_INLINE void EvrFsCore_ftime_get (const char *path, fsTime *create, fsTime *access, fsTime *write)
\details
The event \b ftime_get is generated when the function \ref ftime_get is called.

\b Value in the Event Recorder shows:
  - \b path : hex value specifying the memory location of the file path string.
  - \b create : hex value specifying the memory location of the \ref fsTime structure where create time information will be stored.
  - \b access : hex value specifying the memory location of the \ref fsTime structure where last access time information will be stored.
  - \b write : hex value specifying the memory location of the \ref fsTime structure where last write time information will be stored.
*/

/**
\fn  __STATIC_INLINE void EvrFsCore_fversion (uint32_t version)
\details
The event \b fversion get is generated when the function \ref fversion is called.

\b Value in the Event Recorder shows:
  - FileSystem component version in decimal format: MM.mm.bbbb
*/
/**
@}
*/
/* end group evr_core */


/**
\defgroup evr_fsfat FsFAT: FAT File System
\brief    Events generated by FileSystem - FAT File System functions
\details
The File System - FAT File System functions generate events when a FAT drive is accessed.

FileSystem - FAT File System
@{
*/
/**
\fn  __STATIC_INLINE void EvrFsFAT_InitDrive(uint32_t drive)
\details
The event \b InitDrive is generated when the function \ref finit is called and a valid FAT drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitDriveSuccess(uint32_t drive)
\details
The event \b InitDriveSuccess is generated when FAT drive is successfully initialized.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitDriverCfgError(uint32_t drive)
\details
The event \b InitDriverCfgError is generated when I/O driver configuration is invalid.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitDriverError(uint32_t drive)
\details
The event \b InitDriverError is generated when the system failed to initialize the I/O driver.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_UninitDrive(uint32_t drive)
\details
The event \b UninitDrive is generated when the function \ref funinit is called and a valid FAT drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_MountDrive(uint32_t drive)
\details
The event \b MountDrive is generated when the function \ref fmount is called and a valid FAT drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitMediaError(uint32_t drive)
\details
The event \b InitMediaError is generated during drive mount procedure when media initialization fails.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.

*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_MediaInsertStatError(uint32_t drive)
\details
The event \b MediaInsertStatError is generated when functions attempt to access media but media insertion status is invalid.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_MediaInitStatError(uint32_t drive)
\details
The event \b MediaInitStatError is generated when functions attempt to access media but media initialization status is invalid.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_VolumeReadyStatError(uint32_t drive)
\details
The event \b VolumeReadyStatError is generated when the volume is not ready for use.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_VolumeWriteStatError(uint32_t drive)
\details
The event \b VolumeWriteStatError is generated when the volume write protection is active.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_VolumeNotMounted (uint32_t drive)
\details
The event \b VolumeNotMounted is generated when the accessed volume is not mounted.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ReadMBR (uint32_t drive, uint32_t sector)
\details
The event \b ReadMBR is generated when the function \ref fmount reads the Master Boot Record.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
 - \b sector : sector number.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidMBR (uint32_t drive)
\details
The event \b InvalidMBR is generated when the Master Boot Record signature is invalid.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_NonexistentMBR (uint32_t drive)
\details
The event \b NonexistentMBR is generated when the Master Boot Record does not exists.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ReadBootSector (uint32_t drive, uint32_t sector)
\details
The event \b ReadBootSector is generated when the function \ref fmount reads the Boot Sector.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of the sector.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidBootSector (uint32_t drive)
\details
The event \b InvalidBootSector is generated when the Boot Sector signature is invalid.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidFAT (uint32_t drive)
\details
The event \b InvalidFAT is generated when invalid FAT file system properties are detected.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ReadFSInfo (uint32_t drive, uint32_t sector)
\details
The event \b ReadFSInfo is generated when functions attempt to read the FSInfo (FAT32) sector.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : sector number read from the media.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidFSInfo (uint32_t drive)
\details
The event \b InvalidFSInfo is generated when at least one FSInfo sector signature is invalid.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidFreeClusFSInfo (uint32_t drive)
\details
The event \b InvalidFreeClusFSInfo is generated when FSInfo structure contains invalid number of free clusters.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidNextClusFSInfo (uint32_t drive)
\details
The event \b InvalidNextClusFSInfo is generated when FSInfo structure contains invalid next free cluster information.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_WriteFSInfo (uint32_t drive, uint32_t sector)
\details
The event \b WriteFSInfo is generated when functions attempt to write the FSInfo (FAT32) sector.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of sector.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_CountFreeClus (uint32_t drive)
\details
The event \b CountFreeClus is generated on attempt to count the number of free clusters.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_MountDriveSuccess(uint32_t drive)
\details
The event \b MountDriveSuccess is generated when FAT drive is successfully mounted.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_UnmountDrive(uint32_t drive)
\details
The event \b UnmountDrive is generated when the function \ref funmount is called and a valid FAT drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_UnmountDriveSuccess(uint32_t drive)
\details
The event \b UnmountDriveSuccess is generated when FAT drive is successfully unmounted.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatDrive(uint32_t drive)
\details
The event \b FormatDrive is generated when the function \ref fformat is called and a valid FAT drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatDriveSuccess(uint32_t drive)
\details
The event \b FormatDriveSuccess is generated when FAT drive is successfully formatted.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ResetHandles (uint32_t drive)
\details
The event \b ResetHandles is generated when FAT file handles are being reset.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatOptionDetected (uint32_t drive, uint32_t option)
\details
The event \b FormatOptionDetected is generated when the function \ref fformat executes on a FAT drive and format options were detected.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b option : \ref fformat formatting options.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatMediaCapacity (uint32_t drive, uint32_t sectors)
\details
The event \b FormatMediaCapacity is generated during FAT drive formatting when media capacity is determined.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sectors : capacity in amount of sectors.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatLowLevel (uint32_t drive)
\details
The event \b FormatLowLevel is generated when the function \ref fformat is called on a FAT drive with the option \b /LL or \b /LLEB.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatNoSpace (uint32_t drive)
\details
The event \b FormatNoSpace is generated when the function \ref fformat detects not enough space to complete format.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatNoSpaceFAT32 (uint32_t drive)
\details
The event \b FormatNoSpaceFAT32 is generated when the function \ref fformat detects that the volume is too small for FAT32.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_WriteMBR (uint32_t drive, uint32_t sector)
\details
The event \b WriteMBR is generated when the function \ref fformat creates the Master Boot Record.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of first sector.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_WriteBootSector (uint32_t drive, uint32_t sector)
\details
The event \b WriteBootSector is generated when the function \ref fmount writes the Boot Sector.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of first sector.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ClearHiddenSectors (uint32_t drive, uint32_t sector, uint32_t count)
\details
The event \b ClearHiddenSectors is generated when the function \ref fformat attempts to clear hidden sectors.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of first sector.
  - \b count : number of sectors to clear.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ClearReservedSectors (uint32_t drive, uint32_t sector, uint32_t count)
\details
The event \b ClearReservedSectors is generated when the function \ref fformat attempts to clear reserved sectors.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of first sector.
  - \b count : number of sectors to clear.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ClearRootSectors (uint32_t drive, uint32_t sector, uint32_t count)
\details
The event \b ClearRootSectors is generated when the function \ref fformat attempts to clear the root sectors.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of first sector.
  - \b count : number of sectors to clear.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_CreateFAT (uint32_t drive, uint32_t sector, uint32_t count)
\details
The event \b CreateFAT is generated when the function \ref fformat attempts to create the File Allocation Table.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : number of first sector.
  - \b count : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FormatProperties (uint32_t drive, uint32_t type, uint32_t clus_size, uint32_t data_clus)
\details
The event \b FormatProperties is generated when the function \ref fformat determines the volume formatting parameters.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b type : FAT type.
  - \b clus_size : cluster size.
  - \b data_clus : number of data clusters.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileOpen (uint32_t h, const char *path, uint32_t openmode)
\details
The event \b FileOpen is generated when the function \ref fopen attempts to open a file on a FAT drive.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b path : pointer to the filename.
  - \b openmode : indicates the \ref fs_file_mode "file mode".
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PathInvalidChar (const char ch)
\details
The event \b PathInvalidChar is generated when \ref file_maintenance_routines or \ref directory_maintenance_routines detect a wrong character in the \b path parameter.

\b Value in the Event Recorder shows:
  - \b ch : invalid character detected.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PathIsTooLong (uint32_t max_len)
\details
The event \b PathIsTooLong is generated when \ref file_maintenance_routines or \ref directory_maintenance_routines detect a \b path name that is too long.

\b Value in the Event Recorder shows:
  - \b max_len : maximum allowed path length.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PathIsDirNotFile (uint32_t drive)
\details
The event \b PathIsDirNotFile is generated when the expected parameter of \ref file_maintenance_routines is a directory instead of a file.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileIsInUse (uint32_t drive)
\details
The event \b FileIsInUse is generated when \ref file_maintenance_routines or \ref stdio_routines try to access a FAT file that is in use.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileIsReadOnly (uint32_t drive)
\details
The event \b FileIsReadOnly is generated when \ref file_maintenance_routines or \ref stdio_routines try to write to a file that is protected from writing.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileIsNonExistent (uint32_t drive)
\details
The event \b FileIsNonExistent is generated when \ref file_maintenance_routines or \ref stdio_routines try to access a non-existing file.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PathProcessing (uint32_t drive, const char *path)
\details
The event \b PathProcessing is generated on attempt to traverse the specified path.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : hex value specifying the memory location of the path specification string.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileHandleUnavailable (uint32_t drive)
\details
The event \b FileHandleUnavailable is generated when there is no free FAT file handle available.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileHandleInvalid (uint32_t h)
\details
The event \b FileHandleInvalid is generated when function detects invalid file handle index.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_LabelInvalid (uint32_t drive)
\details
The event \b LabelInvalid is generated when function \ref fformat detects invalid label character in specified label.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_LabelNotSet (uint32_t drive)
\details
The event \b LabelNotSet is generated when function \ref fvol attempts to read nonexistent volume label.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_SectorReadFailed (uint32_t drive, uint32_t sector, uint32_t count)
\details
The event \b SectorReadFailed is generated when sector read fails.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : sector number.
  - \b count : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_SectorWriteFailed (uint32_t drive, uint32_t sector, uint32_t count)
\details
The event \b SectorWriteFailed is generated when sector write fails.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : sector number.
  - \b count : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DiskFull (uint32_t drive)
\details
The event \b DiskFull is generated when there is no more free space on the volume.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DirEntryAllocFailed (uint32_t drive, uint32_t dir_clus)
\details
The event \b DirEntryAllocFailed is generated when the file name entry allocation failed.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b dir_clus : first cluster of the directory where entry should be created.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PathBufferToSmall (uint32_t drive)
\details
The event \b PathBufferToSmall is generated when specified file path storing buffer is to small.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitJournal (uint32_t drive)
\details
The event \b InitJournal is generated when functions \ref fmount or \ref fformat attempt to initialize the FAT journal.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitJournalSuccess (uint32_t drive)
\details
The event \b InitJournalSuccess is generated when FAT journal in successfully initialized.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InitJournalFATError (uint32_t drive)
\details
The event \b InitJournalFATError is generated when FAT journal initialization fails.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileClose (uint32_t h)
\details
The event \b FileClose is generated during execution of the function \ref fclose.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileHandleError (int32_t h, uint32_t flags)
\details


\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b flags : file handle status flags.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileRead (uint32_t h, uint8_t *buf, uint32_t len)
\details
The event \b FileRead is generated when the function \ref fread operates on a file.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b buf : pointer specifying the storage buffer.
  - \b len : item size in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileWrite (uint32_t h, const uint8_t *buf, uint32_t len)
\details
The event \b FileWrite is generated when the function \ref fwrite operates on a file.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b buf : pointer specifying the storage buffer.
  - \b len : item size in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileFlush (uint32_t h)
\details
The event \b FileFlush is generated during execution of the function \ref fflush.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileSeek (uint32_t h, uint32_t pos)
\details
The event \b FileSeek is generated during execution of the function \ref fseek.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b pos : new cursor location.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileSeekIncrease (int32_t h, uint32_t csize, uint32_t nsize)
\details
The event \b FileSeekIncrease is generated when function \ref fseek attempts to increase the file size by setting file cursor position beyond EOF.

\b Value in the Event Recorder shows:
  - \b csize : current file size.
  - \b nsize : new file size and new cursor location.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileDelete (uint32_t drive, const char *path)
\details
The event \b FileDelete is generated when the function \ref fdelete executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileDeleteSuccess (uint32_t drive, const char *path)
\details
The event \b FileDeleteSuccess is generated when the function \ref fdelete executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileRename (uint32_t drive, const char *path, const char *newname)
\details
The event \b FileRename is generated when the function \ref frename executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : HEX value specifying the memory location of the initial file name.
  - \b newname : HEX value specifying the memory location of the new file name.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileRenameSuccess (uint32_t drive, const char *path, const char *newname)
\details
The event \b FileRenameSuccess is generated when the function \ref frename executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : HEX value specifying the memory location of the initial file name.
  - \b newname : HEX value specifying the memory location of the new file name.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DirCreate (uint32_t drive, const char *path)
\details
The event \b DirCreate is generated when the function \ref fmkdir executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : HEX value specifying the memory location of the directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DirCreateSuccess (uint32_t drive, const char *path)
\details
The event \b DirCreateSuccess is generated when the function \ref fmkdir executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : HEX value specifying the memory location of the directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DirRemove (uint32_t drive, const char *path, const char *options)
\details
The event \b DirRemove is generated when the function \ref frmdir executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : HEX value specifying the memory location of the directory.
  - \b options: string specifying function options.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DirRemoveSuccess (uint32_t drive, const char *path, const char *options)
\details
The event \b DirRemoveSuccess is generated when the function \ref frmdir executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
  - \b options: string specifying function options.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ChDir (uint32_t drive, const char *path)
\details
The event \b ChDir is generated when the function \ref fchdir executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_ChDirSuccess (uint32_t drive, const char *path)
\details
The event \b ChDirSuccess is generated when the function \ref fchdir executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_Pwd (uint32_t drive, const char *path, uint32_t len)
\details
The event \b Pwd is generated when the function \ref fpwd executes.

\b Value in the Event Recorder shows:
  - \b drive : string specifying the memory or storage device.
  - \b path : string specifying the directory.
  - \b len : string buffer length.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PwdSuccess (uint32_t drive, const char *path, uint32_t len)
\details
The event \b PwdSuccess is generated when the function \ref fpwd executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : string specifying the memory or storage device.
  - \b path : string specifying the directory.
  - \b len : string buffer length.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_AttribSet (uint32_t drive, const char *path, uint32_t attrib)
\details
The event \b AttribSet is generated when the function \ref fattrib executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
  - \b attrib : string specifying file or directory attributes.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_AttribSetSuccess (uint32_t drive, const char *path, uint32_t attrib)
\details
The event \b AttribSetSuccess is generated when the function \ref fattrib executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
  - \b attrib : string specifying file or directory attributes.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_GetFreeSpace (uint32_t drive)
\details
The event \b FreeSpaceRetrieve is generated when the function \ref ffree executes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FreeAmount (uint32_t drive, uint32_t clus, uint32_t size)
\details
The event \b FreeAmount is generated when the function \ref ffree executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b free : free space or execution status
               - value \>= 0: free space on drive in bytes.
               - value \< 0: error occurred, -value is execution status as defined with \ref fsStatus
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileModeRead (int32_t h)
\details
The event \b FileModeRead is generated on write attempt to a file opened in read only mode.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_FileFind (int32_t h)
\details


\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_InvalidParameter (uint32_t drive)
\details
The event \b InvalidParameter is generated when functions detect invalid parameter.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_DriverNotInitialized (uint32_t drive)
\details
The event \b InvalidParameter is generated when functions detect an uninitialized media driver.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_PathName (const char *buf, uint32_t len)
\details
The event \b PathName is generated when file or directory path is specified in a function call.

\b Value in the Event Recorder shows:
  - <i> ASCII string representation of a file or directory path.</i>
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_OptionsString (const char *buf, uint32_t len)
\details
The event \b OptionsString is generated when options string is specified in a function call.

\b Value in the Event Recorder shows:
  - <i> ASCII string representation of the specified options.</i>
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_LabelString (const char *buf, uint32_t len)
\details
The event \b LabelString is generated when volume label is specified in a function call.

\b Value in the Event Recorder shows:
  - <i> ASCII string representation of the label specified.</i>
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_NameCacheHit (uint32_t drive, const char *name, uint32_t len)
\details
The event \b NameCacheHit is generated when specified file or directory name was found in the FAT name cache.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b name : pointer to memory location where name string is stored
  - \b len : name string length
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_NameCacheMiss (uint32_t drive, const char *name, uint32_t len)
\details
The event \b NameCacheMiss is generated when specified file or directory name was not found in the FAT name cache.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b name : pointer to memory location where name string is stored.
  - \b len : name string length.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_NameCacheEntryFound (uint32_t drive, uint32_t clus, uint32_t offs, uint32_t cnt)
\details
The event \b NameCacheEntryFound is generated when location of the FAT directory entry was found in the FAT name cache.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b clus : FAT directory entry cluster number.
  - \b offs : FAT directory entry offset number.
  - \b cnt : number of FAT directory entries correlated with current file or directory name.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_NameCacheEntryInsert (uint32_t drive, uint32_t clus, uint32_t offs, uint32_t cnt)
\details
The event \b NameCacheEntryInsert is generated when location of the FAT directory entry was inserted into the FAT name cache.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b clus : FAT directory entry cluster number.
  - \b offs : FAT directory entry offset number.
  - \b cnt : number of FAT directory entries correlated with current file or directory name.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_NameCacheEntryDelete (uint32_t drive, uint32_t clus, uint32_t offs, uint32_t cnt)
\details
The event \b NameCacheEntryDelete is generated when location of the FAT directory entry was deleted from the FAT name cache.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b clus : FAT directory entry cluster number.
  - \b offs : FAT directory entry offset number.
  - \b cnt : number of FAT directory entries correlated with current file or directory name.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_TimeSet (uint32_t drive, const char *path)
\details
The event \b TimeGet is generated when timestamp information is set by the application.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : pointer to the filename.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_TimeGet (uint32_t drive, const char *path)
\details
The event \b TimeGet is generated when timestamp information is retrieved by the application.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : pointer to the filename.
*/

/**
\fn  __STATIC_INLINE void EvrFsFAT_TimeData (fsTime *create, fsTime *access, fsTime *write)
\details
The event \b TimeData is generated when timestamp information is set or retrieved by the application.

\b Value in the Event Recorder shows:
  - type of timestamp: "Create Time", "Last Access Time" or "Last Write Time"
  - time and date information: hour:minute:second, day.month.year
*/

/**
@}
*/
/* end group evr_fsfat */


/**
\defgroup evr_fsefs FsEFS: EFS File System
\brief    Events generated by File System - Embedded File System functions
\details
FileSystem - Embedded File System
@{
 */
/**
\fn  __STATIC_INLINE void EvrFsEFS_InitDrive (uint32_t drive)
\details
The event \b InitDrive is generated when the function \ref finit is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive :  identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_InitDriver (uint32_t drive, uint32_t driver)
\details
The event \b InitDriver is generated when the system initializes the media driver.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_InitDriverFailed (uint32_t drive, uint32_t driver)
\details
The event \b InitDriverFailed is generated when the system failed to initialize the media driver.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_UninitDrive (uint32_t drive)
\details
The event \b UninitDrive is generated when the function \ref funinit is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_UninitDriver (uint32_t drive, uint32_t driver)
\details
The event \b UninitDriver is generated when the system uninitializes the media driver.

\b Value in the Event Recorder shows:
 - \b drive : identifier of the drive.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_MountDrive (uint32_t drive)
\details
The event \b MountDrive is generated when the function \ref fmount is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_MountDriveSuccess (uint32_t drive)
\details
The event \b MountDriveSuccess is generated when EFS drive is successfully mounted.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashGetInfo (uint32_t drive)
\details
The event \b FlashGetInfo is generated when the function \ref fmount attempts to retrieve Flash information.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashProgUnitTooBig (uint32_t drive, uint32_t current, uint32_t required)
\details
The event \b FlashProgUnitTooBig is generated when CMSIS Flash driver reports smallest programmable unit that is to big.

Embedded File System requires smallest programmable unit smaller than or equal to 4 bytes.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b current : size of current program unit.
  - \b required : expected size.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashCapacity (uint32_t drive, uint32_t capacity)
\details
The event \b FlashCapacity is generated when EFS determines the flash device capacity.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b capacity : flash size in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_UnmountDrive (uint32_t drive)
\details
The event \b UnmountDrive is generated when the function \ref funmount is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_UnmountDriveSuccess (uint32_t drive)
\details
The event \b UnmountDriveSuccess is generated when the function \ref funmount executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FormatDrive (uint32_t drive)
\details
The event \b FormatDrive is generated when the function \ref fformat is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.

*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FormatDriveSuccess (uint32_t drive)
\details
The event \b FormatDriveSuccess is generated when the function \ref fformat executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashEraseChip (uint32_t drive)
\details
The event \b FlashEraseChip is generated when the function \ref fformat erases the chip content.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashEraseChipFailed (uint32_t drive)
\details
The event \b FlashEraseChipFailed is generated when the function \ref fformat failed to erase the chip.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashEraseChipTimeout (uint32_t drive)
\details
The event \b FlashEraseChipTimeout is generated when the attempt to erase the chip failed on timeout.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashEraseSectors (uint32_t drive, uint32_t sector, uint32_t cnt)
\details
The event \b FlashEraseSectors is generated when the attempt is made to erase chip sectors during Flash programming.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b sector : sector number.
  - \b cnt: number of sectors to erase.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileOpen (uint32_t h, const char *path, uint32_t openmode)
\details
The event \b FileOpen is generated when the function \ref fopen attempts to open a file on the EFS drive.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b path : pointer to the file name.
  - \b openmode : indicates the \ref fs_file_mode "file mode".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileNameInvalid (const char *name, uint32_t len)
\details
The event \b FileNameInvalid is generated when invalid file name is specified to the function.

\b Value in the Event Recorder shows:
  - \b name : pointer to the file name.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_OpenModeUnsupported (uint32_t h, uint32_t openmode)
\details
The event \b OpenModeUnsupported when an attempt was made to operate on an invalid file mode.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b openmode : indicates the \ref fs_file_mode "file mode".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileClose (uint32_t h)
\details
The event \b FileClose is generated when the function \ref fclose is called and a valid EFS file handle is specified.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileNotOpened (uint32_t h, uint32_t flags)
\details
The event \b FileNotOpened is generated when an attempt is made to operate on a closed file.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b flags : file handle flags.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileRead (uint32_t h, uint8_t *buf, uint32_t len)
\details
The event \b FileRead is generated when the function \ref fread is called and a valid EFS file handle is specified.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b buf : pointer specifying the storage buffer.
  - \b len : item size in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileOpenWriteMode (uint32_t h)
\details
The event \b FileOpenWriteMode is generated when the file is open in "write" mode.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileWrite (uint32_t h, const uint8_t *buf, uint32_t len)
\details
The event \b FileWrite is generated when the function \ref fwrite is called and a valid EFS file handle is specified.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b buf : pointer specifying the storage buffer.
  - \b len : item size in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileOpenReadMode (uint32_t h)
\details
The event \b FileOpenReadMode is generated when the file is open in "read" mode.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileFlush (uint32_t h)
\details
The event \b FileFlush is generated when the function \ref fflush is called and a valid EFS file handle is specified.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_OpenModeInvalid (uint32_t h, uint32_t flags)
\details
The event \b OpenModeInvalid is generated when file handle state is invalid.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b flags : file handle flags.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileSeek (uint32_t h, uint32_t pos)
\details
The event \b FileSeek is generated when the function \ref fseek is called and a valid EFS file handle is specified.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b pos : file stream's in-file position.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileSeekEOF (uint32_t h, uint32_t size, uint32_t pos)
\details
The event \b FileSeekEOF is generated when the function \ref fseek attempts to seek beyond the end of file.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
  - \b size: current file size.
  - \b pos : new cursor location.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileDelete (uint32_t drive, const char *path)
\details
The event \b FileDelete is generated when the function \ref fdelete is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileRename (uint32_t drive, const char *path, const char *newname)
\details
The event \b FileRename is generated when the function \ref frename is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b path : string specifying the file or directory.
  - \b newname : new file name.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileNotFound (uint32_t drive)
\details
The event \b FileNotFound is generated when an operation executes on a unknown file.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileAlreadyExists (uint32_t drive)
\details
The event \b FileAlreadyExists is generated when a function attempts to create a file with a name that exists already.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FreeSpaceRetrieve (uint32_t drive)
\details
The event \b FreeSpaceRetrieve is generated when the function \ref ffree is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FreeSpaceAmount (uint32_t drive, uint32_t free)
\details
The event \b FreeSpaceAmount is generated when the function \ref ffree executed successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b free : free space or execution status
               - value \>= 0: free space on drive in bytes.
               - value \< 0: error occurred, -value is execution status as defined with \ref fsStatus
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveAnalyze (uint32_t drive)
\details
The event \b DriveAnalyze is generated when the function \ref fanalyse is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveAnalyzeSuccess (uint32_t drive, uint32_t factor)
\details
The event \b DriveAnalyzeSuccess is generated when the function \ref fanalyse has finished.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b factor: fragmentation factor or execution status
               - value \>= 0 or \<= 255: fragmentation factor.
               - value \< 0: error occurred, -value is execution status as defined with \ref fsStatus
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveCheck (uint32_t drive)
\details
The event \b DriveCheck is generated when the function \ref fcheck is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveCheckSuccess (uint32_t drive)
\details
The event \b DriveCheckSuccess is generated when the function \ref fcheck executes successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DataAreaOverlap (uint32_t drive)
\details
The event \b DataAreaOverlap is generated when the function \ref fcheck detects overlapping in the file allocation area.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileIdInvalid (uint32_t drive)
\details
The event \b FileIdInvalid is generated when the function \ref fanalyse detects an invalid file ID.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_AllocationOrderInvalid (uint32_t drive)
\details
The event \b AllocationOrderInvalid when the function \ref fcheck detects a non-ascending allocation pointer.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_AllocationAreaOverlap (uint32_t drive)
\details
The event \b AllocationAreaOverlap is generated when the function \ref fcheck detects an overlapping file allocation record.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveDefrag (uint32_t drive)
\details
The event \b DriveDefrag is generated when the function \ref fdefrag is called and a valid EFS drive is specified.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileHandleActive (uint32_t drive, uint32_t h)
\details
The event \b FileHandleActive is generated when function \ref fdefrag detects an active file handle.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileHandleUnavailable (uint32_t drive)
\details
The event \b FileHandleUnavailable is generated when functions use a file handler that is in use already.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileHandleInvalid (uint32_t h)
\details
The event \b FileHandleInvalid is generated when functions use an undefined file handler.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileInUse (uint32_t h)
\details
The event \b FileInUse is generated when functions try to use a file handler that is in use already.

\b Value in the Event Recorder shows:
  - \b h : indicates the \ref fs_file_handle_index "file handle index".
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DiskFull (uint32_t drive)
\details
The event \b DiskFull is generated when the disk is out of free space.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashWriteFailed (uint32_t drive, uint32_t addr, void *buf, uint32_t cnt)
\details
The event \b FlashWriteFailed is generated when writing to Flash failed.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b addr : memory address.
  - \b buf : data buffer memory address.
  - \b cnt : number of bytes to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashReadFailed (uint32_t drive, uint32_t addr, void *buf, uint32_t cnt)
\details
The event \b FlashReadFailed is generated when reading from Flash failed.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b addr : memory address.
  - \b buf : data buffer memory address.
  - \b cnt : number of bytes to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashReadTimeout (uint32_t drive, uint32_t addr, void *buf, uint32_t cnt)
\details
The event \b FlashReadTimeout is generated when reading from Flash failed on timeout.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b addr : memory address.
  - \b buf : data buffer memory address.
  - \b cnt : number of bytes to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FlashEraseFailed (uint32_t drive, uint32_t block, uint32_t addr)
\details
The event \b FlashEraseFailed is generated when EFS fails to erase a memory block.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b block : block number.
  - \b addr : block memory address.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_InvalidParameter (uint32_t drive)
\details
The event \b InvalidParameter is generated when functions are called with wrong parameters.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveNotMounted (uint32_t drive)
\details
The event \b DriveNotMounted is generated when a function \ref fmount operates on an unmounted EFS drive.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_DriveNotInitialized (uint32_t drive)
\details
The event \b DriveNotInitialized is generated when a function operates on an uninitialized EFS drive.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileName (const char *buf, uint32_t len)
\details

\b Value in the Event Recorder shows:
  - <i>current file name</i>
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileAllocRead (uint32_t addr, uint32_t end, uint32_t fileID, uint32_t index)
\details
The event \b FileAllocRead is generated when file allocation info describing each existing file fragment is read out from the flash memory.

\b Value in the Event Recorder shows:
  - \b addr : memory address of the file allocation info currently read
  - \b end : address where the corresponding file fragment ends
  - \b fileID : file identification number of the corresponding file fragment
  - \b index : ordering number of the corresponding file fragment
*/

/**
\fn  __STATIC_INLINE void EvrFsEFS_FileAllocWrite (uint32_t addr, uint32_t end, uint32_t fileID, uint32_t index)
\details
The event \b FileAllocWrite is generated when file allocation info describing current file fragment is written to the flash memory.

\b Value in the Event Recorder shows:
  - \b addr : memory address of the file allocation info currently written
  - \b end : address where the corresponding file fragment ends
  - \b fileID : file identification number of the corresponding file fragment
  - \b index : ordering number of the corresponding file fragment
*/


/**
@}
*/
/* end group evr_fsefs */


/**
\defgroup evr_fsioc FsIOC: I/O Control Interface
\brief    Events generated by File System - I/O Control Interface functions
\details
FileSystem - I/O Control Interface
@{
*/
/**
\fn  __STATIC_INLINE void EvrFsIOC_GetId (uint32_t drive)
\details
The event \b GetId is generated when the function \ref fs_ioc_get_id is called.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_GetIdSuccess (uint32_t drive, uint32_t drv_id)
\details
The event \b GetIdSuccess is generated when the function \ref fs_ioc_get_id executes successfully.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_GetIdError (uint32_t drive)
\details
The event \b GetIdError is generated when the function \ref fs_ioc_get_id detects nonexistent drive or invalid drive specification.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_Lock (uint32_t drv_id)
\details
The event \b Lock is generated when the function \ref fs_ioc_lock is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_LockSuccess (uint32_t drv_id)
\details
The event \b LockSuccess is generated when the function \ref fs_ioc_lock successfully prepares the drive for I/O Control access.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_Unlock (uint32_t drv_id)
\details
The event \b Unlock is generated when the function \ref fs_ioc_unlock is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_UnlockSuccess (uint32_t drv_id)
\details
The event \b UnlockSuccess is generated when the function \ref fs_ioc_unlock successfully releases the drive I/O Control access.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_GetCache (uint32_t drv_id, uint32_t cache_info)
\details
The event \b GetCache is generated when the function \ref fs_ioc_get_cache is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b cache_info : memory address of the \ref fsIOC_Cache structure.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_GetCacheSuccess (uint32_t drv_id, uint32_t buf, uint32_t size)
\details
The event \b GetCacheSuccess is generated when the function \ref fs_ioc_get_cache executes successfully and drive cache information is retrieved.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b buf : memory address of the drive cache buffer.
  - \b size : drive cache buffer size in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_ReadSector (uint32_t drv_id, uint32_t sect, uint32_t buf, uint32_t cnt)
\details
The event \b ReadSector is generated when the function \ref fs_ioc_read_sector is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect : sector number to read.
  - \b buf : data buffer memory location.
  - \b cnt : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_ReadSectorSuccess (uint32_t drv_id, uint32_t sect, uint32_t buf, uint32_t cnt)
\details
The event \b ReadSectorSuccess is generated when the function \ref fs_ioc_read_sector executes successfully.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect : sector number to read.
  - \b buf : data buffer memory location.
  - \b cnt : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_ReadSectorError (uint32_t drv_id, uint32_t sect, uint32_t buf, uint32_t cnt)
\details
The event \b ReadSectorError is generated when the function \ref fs_ioc_read_sector fails due to the media driver error.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect : sector number to read.
  - \b buf : data buffer memory location.
  - \b cnt : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_WriteSector (uint32_t drv_id, uint32_t sect, uint32_t buf, uint32_t cnt)
\details
The event \b WriteSector is generated when the function \ref fs_ioc_write_sector is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect : sector number to write.
  - \b buf : data buffer memory location.
  - \b cnt : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_WriteSectorSuccess (uint32_t drv_id, uint32_t sect, uint32_t buf, uint32_t cnt)
\details
The event \b WriteSectorSuccess is generated when the function \ref fs_ioc_write_sector executes successfully.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect : sector number to write.
  - \b buf : data buffer memory location.
  - \b cnt : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_WriteSectorError (uint32_t drv_id, uint32_t sect, uint32_t buf, uint32_t cnt)
\details
The event \b WriteSectorError is generated when the function \ref fs_ioc_write_sector fails due to the media driver error.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect : sector number to write.
  - \b buf : data buffer memory location.
  - \b cnt : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_ReadInfo (uint32_t drv_id, uint32_t info)
\details
The event \b ReadInfo is generated when the function \ref fs_ioc_read_info is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_ReadInfoSuccess (uint32_t drv_id, uint32_t block_count)
\details
The event \b ReadInfoSuccess is generated when the function \ref fs_ioc_read_info executes successfully and storage geometry
properties are retrieved.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b sect_count : number of sectors available on the memory media.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_ReadInfoError (uint32_t drv_id)
\details
The event \b ReadInfoError is generated when the function \ref fs_ioc_read_info fails due to the media driver error.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_DeviceControl (uint32_t drv_id, uint32_t code, uint32_t p)
\details
The event \b DeviceControl is generated when the function \ref fs_ioc_device_ctrl is executed.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
  - \b p : memory address of the control code parameter.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_DeviceControlSuccess (uint32_t drv_id, uint32_t code, uint32_t p)
\details
The event \b DeviceControlSuccess is generated when the function \ref fs_ioc_device_ctrl executes successfully.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
  - \b p : memory address of the control code parameter.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_DriveIdInvalid (uint32_t drv_id)
\details
The event \b DriveIdInvalid is generated when \ref ioc_interface_routines detect invalid drive ID specification.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_DriveNotFAT (uint32_t drv_id)
\details
The event \b DriveNotFAT is generated when \ref ioc_interface_routines detect that drive ID specifies non FAT drive.

\b Value in the Event Recorder shows:
  - \b drv_id : drive ID as an integer.
*/

/**
\fn  __STATIC_INLINE void EvrFsIOC_NotAllowed (uint32_t drive)
\details
The event \b NotAllowed is generated when \ref ioc_interface_routines detect that I/O Control access is not allowed for specified drive.

\b Value in the Event Recorder shows:
  - \b drive : identifier of the drive.
*/
/**
@}
*/
/* end group evr_fsioc */


/**
\defgroup evr_fsnftl  FsNFTL: NAND Flash Translation Layer
\brief    Events generated by File System - NAND Flash Translation Layer functions
\details
FileSystem - NAND Flash Translation Layer
@{
*/
/**
\fn  __STATIC_INLINE void EvrFsNFTL_Init (uint32_t instance)
\details
The event \b Init is generated on attempt to initialize the \ref nand_flash_TL.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_InitMediaFailed (uint32_t instance)
\details
The event \b InitMediaFailed is generated when NAND media driver initialization fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_Mount (uint32_t instance)
\details
The event \b Mount is generated on attempt to mount the \ref nand_flash_TL.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_MountSuccess (uint32_t instance)
\details
The event \b MountSuccess is generated when \ref nand_flash_TL is successfully mounted.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_DeviceNotInitialized (uint32_t instance)
\details
The event \b DeviceNotInitialized is generated on attempt to access de-initialized NAND device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ResetDevice (uint32_t instance)
\details
The event \b ResetDevice is generated on attempt to reset the NAND device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ResetDeviceFailed (uint32_t instance)
\details
The event \b ResetDeviceFailed is generated when NAND media driver fails to execute device reset operation.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ResetDeviceTimeout (uint32_t instance)
\details
The event \b ResetDeviceTimeout is generated when device reset operation fails due to the timeout.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadBootBlock (uint32_t instance)
\details
The event \b ReadBootBlock is generated when \ref nand_flash_TL attempts to read its boot information block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadBootBlockFailed (uint32_t instance)
\details
The event \b ReadBootBlock is generated when \ref nand_flash_TL fails to read its boot information block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BootSignatureValid (uint32_t instance)
\details
The event \b BootSignatureValid is generated when valid signature of the \ref nand_flash_TL boot information block is detected.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BootSignatureInvalid (uint32_t instance)
\details
The event \b BootSignatureValid is generated when \ref nand_flash_TL detects invalid signature in its boot information block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_DataBlockCapacity (uint32_t instance, uint32_t capacity)
\details
The event \b DataBlockCapacity is generated when \ref nand_flash_TL determines number of data blocks available to setup the file system.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b capacity : number of data blocks (size of block equals to device block size).
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadTable (uint32_t instance)
\details
The event \b DataBlockCapacity is generated when \ref nand_flash_TL attempts to load the block translation table.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadTableFailed (uint32_t instance)
\details
The event \b ReadTableFailed is generated when block translation table read fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_Uninit (uint32_t instance)
\details
The event \b Uninit is generated when the function \ref funinit executes and attempts to de-initialize the \ref nand_flash_TL. 

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_UninitDriver (uint32_t instance)
\details
The event \b UninitDriver is generated on attempt to de-initialize the NAND media driver.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_UninitDriverFailed (uint32_t instance)
\details
The event \b UninitDriverFailed is generated when the NAND media driver de-initialization fails.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadInfo (uint32_t instance, uint32_t info)
\details
The event \b ReadInfo is generated on attempt to read NFTL storage geometry properties.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b info : memory address of the \ref fsMediaInfo structure.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadInfoSuccess (uint32_t instance, uint32_t sect_count)
\details
The event \b ReadInfoSuccess is generated when NFTL storage geometry properties are retrieved successfully.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sect_count : number of sectors available on the memory media.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_DevCtrl (uint32_t instance, uint32_t code, void *p)
\details
The event \b DevCtrl is generated when \ref fsDevCtrlCode "control code" is sent directly to \ref nand_flash_TL.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
  - \b p : memory address of the control code parameter.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_DevCtrlUnsupported (uint32_t instance, uint32_t code)
\details
The event \b DevCtrlUnsupported is generated whenever an unsupported \ref fsDevCtrlCode "control code" is used.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_Format (uint32_t instance)
\details
The event \b Format is generated when the function \ref fformat attempts to format \ref nand_flash_TL.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_FormatSuccess (uint32_t instance)
\details
The event \b FormatSuccess is generated when \ref nand_flash_TL formatting is successfully executed.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_FormatLLEB (uint32_t instance)
\details
The event \b FormatLLEB is generated when \ref nand_flash_TL enables erase of blocks marked as bad.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BBMPositionSet (uint32_t instance, uint32_t pos)
\details
The event \b BBMPositionSet is generated when bad block marker position is set.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pos : absolute position of the bad block marker byte.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BadBlockDetected (uint32_t instance, uint32_t block)
\details
The event \b BadBlockDetected is generated when bad block marker is detected within block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b block : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BadBlockMark (uint32_t instance, uint32_t block)
\details
The event \b BadBlockMark is generated when \ref nand_flash_TL formatting function detects unreliable block and attempts to mark it as bad.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b block : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_WriteSector (uint32_t instance, uint32_t sector, const uint8_t *buf, uint32_t cnt)
\details
The event \b WriteSector is generated when \ref nand_flash_TL attempts to write data to the flash.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number to write.
  - \b buf : memory location of the data buffer.
  - \b cnt : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_WriteSectorSuccess (uint32_t instance)
\details
The event \b WriteSectorSuccess is generated when \ref nand_flash_TL successfully writes data to the flash.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number to write.
  - \b buf : memory location of the data buffer.
  - \b cnt : number of sectors written.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadSector (uint32_t instance, uint32_t sector, uint8_t *buf, uint32_t cnt)
\details
The event \b ReadSector is generated when \ref nand_flash_TL attempts to read data from the flash.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number to read.
  - \b buf : memory location of the data buffer.
  - \b cnt : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ReadSectorSuccess (uint32_t instance)
\details
The event \b ReadSectorSuccess is generated when \ref nand_flash_TL successfully reads data from the flash.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number to read.
  - \b buf : memory location of the data buffer.
  - \b cnt : number of sectors read.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LsnToLbn (uint32_t instance, uint32_t lsn, uint32_t lbn)
\details
The event \b LsnToLbn is generated on conversion of logical sector number to logical block number.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lsn : logical sector number.
  - \b lbn : logical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LbnToPbn (uint32_t instance, uint32_t lbn, uint32_t pbn_0, uint32_t pbn_1)
\details
The event \b LbnToPbn is generated when \ref nand_flash_TL determines the physical locations of a logical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lbn : logical block number.
  - \b pbn_0 : number of physical block 0.
  - \b pbn_1 : number of physical block 1.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LbnOutOfRange (uint32_t instance, uint32_t lbn, uint32_t max)
\details
The event \b LbnOutOfRange is generated when \ref nand_flash_TL detect logical block number which is higher than total number of logical blocks.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lbn : detected logical block number.
  - \b max : maximum number of logical blocks.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PbnOutOfRange (uint32_t instance, uint32_t pbn, uint32_t max)
\details
The event \b PbnOutOfRange is generated \ref nand_flash_TL detect physical block number which is higher than total number of physical blocks.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : detected physical block number.
  - \b max : maximum number of physical blocks.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_TableLookup (uint32_t instance, uint32_t lbn)
\details
The event \b TableLookup is generated \ref nand_flash_TL attempts to read translation table in order to retrieve
translation information for specified logical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lbn : logical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_TableEntryNotFound (uint32_t instance, uint32_t lbn)
\details
The event \b TableEntryNotFound is generated when translation table does not contain translation information for specified logical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lbn : logical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_AllocateBlock (uint32_t instance, uint32_t area)
\details
The event \b AllocateBlock is generated when \ref nand_flash_TL attempts to allocate free block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b area : allocation area (0=translation table, 1=data area).
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LsnFind (uint32_t instance, uint32_t lsn, uint32_t pbn)
\details

The event \b LsnFind is generated when \ref nand_flash_TL attempts to find logical sector within physical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lsn : logical sector number.
  - \b pbn : physical sector number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LsnFound (uint32_t instance, uint32_t lsn, uint32_t pbn, uint32_t pg)
\details
The event \b LsnFound is generated when \ref nand_flash_TL logical sector is found within physical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lsn : logical sector number.
  - \b pbn : physical sector number.
  - \b pg : page which contains logical sector.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LsnNotFound (uint32_t instance, uint32_t lsn, uint32_t pbn)
\details
The event \b LsnNotFound is generated when \ref nand_flash_TL logical sector is found within physical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lsn : logical sector number.
  - \b pbn : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_GarbageCollection (uint32_t instance, uint32_t src_0, uint32_t src_1, uint32_t dst)
\details
The event \b GarbageCollection is generated when garbage collection procedure is started.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b src_0 : first data source block.
  - \b src_1 : second data source block.
  - \b dst : data destination block.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_SetBadBlockMarker (uint32_t instance, uint32_t pbn)
\details
The event \b MoveData is generated on attempt to mark block as bad.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_MoveData (uint32_t instance, uint32_t src, uint32_t dst)
\details
The event \b MoveData is generated on attempt to move data from source to destination block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b src : physical number of the source block.
  - \b dst : physical number of the destination block.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_RelocateBlock (uint32_t instance, uint32_t pbn)
\details
The event \b RelocateBlock is generated when \ref nand_flash_TL attempts to relocate content from a bad block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_RelocateBlockFailed (uint32_t instance, uint32_t pbn)
\details
The event \b RelocateBlockFailed is generated when \ref nand_flash_TL fails to relocate content from a bad block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_SkipBadBlock (uint32_t instance, uint32_t pbn)
\details
The event \b SkipBadBlock is generated when \ref nand_flash_TL detects bad block and skips the operation till next valid block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PageReadFailed (uint32_t instance, uint32_t row)
\details
The event \b PageReadFailed is generated when NAND media driver fails to execute page read operation.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the page.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PageProgramStatusErr (uint32_t instance, uint32_t row)
\details
The event \b PageProgramStatusErr is generated when NAND device fails to program the memory page.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the page.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PageProgramFailed (uint32_t instance, uint32_t row)
\details
The event \b PageProgramFailed is generated when NAND media driver fails to execute page program operation.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the page.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PageProgramTimeout (uint32_t instance, uint32_t row)
\details
The event \b PageProgramTimeout is generated when page program operation fails due to the timeout.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the page.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BlockEraseStatusErr (uint32_t instance, uint32_t row)
\details
The event \b BlockEraseStatusErr is generated when NAND device fails to erase the memory block.
This usually happens when block becomes bad or when block erase operation is executed on a bad block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the block.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BlockEraseFailed (uint32_t instance, uint32_t row)
\details
The event \b BlockEraseFailed is generated when NAND media driver fails to execute block erase operation.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the block.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BlockEraseTimeout (uint32_t instance, uint32_t row)
\details
The event \b BlockEraseTimeout is generated when block erase operation fails due to the timeout.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the block.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BitErrorCorrected (uint32_t instance, uint32_t row)
\details
The event \b BitErrorCorrected is generated when ECC algorithm corrects bit error.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : row address of the page where bit error occurred.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_ParameterInvalid (uint32_t instance)
\details
The event \b ParameterInvalid is generated when \ref nand_flash_TL detects invalid function parameter.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_TableUpdate (uint32_t instance, uint32_t lbn, uint32_t pbn_0, uint32_t pbn_1)
\details
The event \b TableUpdate is generated when \ref nand_flash_TL updates logical to physical block translation info.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lbn : logical block number
  - \b src_0 : physical block number (location 0)
  - \b src_1 : physical block number (location 1)
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_AllocatedBlock (uint32_t instance, uint32_t pbn)
\details
The event \b AllocatedBlock is generated when \ref nand_flash_TL successfully allocates an empty physical block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : allocated physical block number
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LoadSector (uint32_t instance, uint32_t lsn, uint32_t offs, uint32_t spare)
\details
The event \b LoadSector is generated when \ref nand_flash_TL loads sector data from/to the NAND page buffer.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b lsn : logical sector number to be loaded
  - \b offs : sector data byte offset within page
  - \b spare : sector spare byte offset within page
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LoadTableLayout (uint32_t instance, uint32_t pbn_0, uint32_t pbn_1)
\details
The event \b LoadTableLayout is generated when \ref nand_flash_TL reads translation table area configuration from the NAND configuration structure.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn_0 : physical block number of the first translation table block
  - \b pbn_1 : physical block number of the last translation table block
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_LoadDataLayout (uint32_t instance, uint32_t pbn_0, uint32_t pbn_1)
\details
The event \b LoadDataLayout is generated when \ref nand_flash_TL reads file data area configuration from the NAND configuration structure.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn_0 : physical block number of the first file data block
  - \b pbn_1 : physical block number of the last first data block
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_SetupPageLayout (uint32_t instance, uint32_t sector_inc, uint32_t spare_ofs, uint32_t spare_inc)
\details
The event \b SetupPageLayout is generated when \ref nand_flash_TL sets NAND page layout configuration.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector_inc : column increment till next sector - first sector starts at byte zero, second at sect_inc, third at (sect_inc + sect_inc) etc.
  - \b spare_ofs : spare area offset from beginning of the page.
  - \b spare_inc : column increment till next spare - first spare area is determined by spare_ofs value, while next spare is at (spare_ofs + spare_inc)
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_SetupSpareLayout (uint32_t instance, uint32_t ofs_lsn, uint32_t ofs_dcm, uint32_t ofs_bbm, uint32_t ofs_ecc)
\details
The event \b SetupSpareLayout is generated when \ref nand_flash_TL sets spare area layout configuration.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b ofs_lsn : LSN position, offset within spare area where logical sector number (LSN) is placed.
  - \b ofs_dcm : DCM position, offset within spare area where data corrupted marker (DCM) is placed.
  - \b ofs_bbm : BBM position, offset within spare area where bad block marker (BBM) is placed.
  - \b ofs_ecc : ECC position, offset within spare area where error correction code (ECC) data starts.
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PageRead (uint32_t instance, uint32_t pbn, uint32_t pg)
\details
The event \b PageRead is generated when \ref nand_flash_TL reads a page from NAND device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number
  - \b pg : page number
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_PageWrite (uint32_t instance, uint32_t pbn, uint32_t pg)
\details
The event \b PageWrite is generated when \ref nand_flash_TL writes a page to NAND device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number
  - \b pg : page number
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_BlockErase (uint32_t instance, uint32_t pbn)
\details
The event \b BlockErase is generated when \ref nand_flash_TL erases NAND device block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_StatusRead (uint32_t instance, uint32_t status)
\details
The event \b StatusRead is generated when \ref nand_flash_TL retrieves NAND device status.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b status : NAND device status byte
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_CacheRead (uint32_t instance, uint32_t pbn, uint32_t pg, uint32_t col)
\details
The event \b CacheRead is generated when \ref nand_flash_TL reads a page using page cache.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number
  - \b pg : page number
  - \b col : column number
*/

/**
\fn  __STATIC_INLINE void EvrFsNFTL_CacheWrite (uint32_t instance, uint32_t pbn, uint32_t pg)
\details
The event \b CacheWrite is generated when \ref nand_flash_TL writes a page using page cache.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b pbn : physical block number
  - \b pg : page number
*/
/**
@}
*/
/* end group evr_fsnftl */


/**
\defgroup evr_fsnand FsNAND: NAND Device Interface
\brief    Events generated by File System - NAND Flash Device Interface functions
\details
FileSystem - NAND Flash Device Interface
@{
*/
/**
\fn  __STATIC_INLINE void EvrFsNAND_Init (uint32_t instance)
\details
The event \b Init is generated on attempt to initialize the NAND media driver.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_InitDriver (uint32_t instance, uint32_t driver)
\details
The event \b InitDriver is generated when the system initializes the NAND driver.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_InitDriverError (uint32_t instance, uint32_t driver)
\details
The event \b InitDriverError is generated when the system fails to initialize the NAND driver.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverPowerCtrlError (uint32_t instance, uint32_t driver, uint32_t state)
\details
The event \b DriverPowerCtrlError is generated when the NAND driver power control functions fail.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b state : power state (ARM_POWER_STATE).
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverBusModeSelect (uint32_t instance, uint32_t driver, uint32_t mode)
\details
The event \b DriverBusModeSelect is generated when the NAND driver bus mode is set.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b mode : bus mode (ARM_NAND_BUS_MODE).
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverBusWidthSelect (uint32_t instance, uint32_t driver, uint32_t width)
\details
The event \b DriverBusWidthSelect is generated when the NAND driver bus width is set.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b width : bus data width (ARM_NAND_BUS_DATA_WIDTH).
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverBusWidthError (uint32_t instance, uint32_t driver, uint32_t width)
\details
The event \b DriverBusWidthSelect is generated when the NAND driver bus width cannot be set.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b width : bus data width (ARM_NAND_BUS_DATA_WIDTH).
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverDevPowerSelect (uint32_t instance, uint32_t driver, uint32_t volt)
\details
The event \b DriverDevPowerSelect is generated when setting the NAND device power.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b volt : NAND Device Power.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverEccInquire (uint32_t instance, uint32_t driver)
\details
The event \b DriverEccInquire is generated when a function is retrieving ECC information.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverEccSelect (uint32_t instance, uint32_t driver, uint32_t index)
\details
The event \b DriverEccSelect is generated when NAND media driver selects ECC layout.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b index : selected ECC index.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverEccInquireError (uint32_t instance, uint32_t driver)
\details
The event \b DriverEccInquireError is generated when a function fails to retrieve ECC information.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DriverTimeoutError (uint32_t instance, uint32_t driver)
\details
The event \b DriverTimeoutError is generated when a function fails to access a driver on time.
Usually, the driver is busy.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DeviceTimeoutError (uint32_t instance, uint32_t driver, uint32_t device)
\details
The event \b DeviceTimeoutError is generated when a function fails to access a device on time.
Usually, the device is busy.

\b Value in the Event Recorder shows:
 - \b instance : number of Software Component driver instance.
 - \b driver : name of Software Component driver.
 - \b device : name of device.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_Uninit (uint32_t instance)
\details
The event \b Uninit is generated on attempt to de-initialize the NAND media driver.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_StatusRead (uint32_t instance, uint32_t status)
\details
The event \b ReadStatus is generated when NAND device status byte is retrieved.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b status : NAND device status.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_BlockErase (uint32_t instance, uint32_t row)
\details
The event \b EraseBlock is generated on attempt to erase NAND device memory block.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row: block row address.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_PageWrite (uint32_t instance, uint32_t row, uint32_t col, uint32_t len)
\details
The event \b PageWrite is generated on attempt to write NAND device memory page.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : page row address.
  - \b col : page column address.
  - \b len : number of bytes to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_PageRead (uint32_t instance, uint32_t row, uint32_t col, uint32_t len)
\details
The event \b PageRead is generated on attempt to read NAND device memory page.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b row : page row address.
  - \b col : page column address.
  - \b len : number of bytes to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_ParamPageRead (uint32_t instance, uint32_t col, uint32_t len)
\details
The event \b DeviceReset is generated on attempt to read NAND device parameter page.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b col : column number.
  - \b len : number of bytes to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_IdRead (uint32_t instance, uint32_t addr, uint32_t len)
\details
The event \b DeviceReset is generated on attempt to read NAND device ID from the specified address.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b addr : ID address.
  - \b len : number of bytes to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsNAND_DeviceReset (uint32_t instance)
\details
The event \b DeviceReset is generated on attempt to reset NAND device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/
/**
@}
*/
/* end group evr_fsnand */


/**
\defgroup evr_fsmcmci FsMcMCI: Memory Card MCI
\brief    Events generated by File System - Memory Card MCI functions
\details
FileSystem - Memory Card MCI
@{
*/
/**
\fn  __STATIC_INLINE void EvrFsMcMCI_InitDriver (uint32_t instance, uint32_t driver)
\details
The event \b InitDriver is generated on attempt to initialize the MCI driver.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_InitDriverError (uint32_t instance, uint32_t driver)
\details
The event \b InitDriverError is generated when the MCI driver initialization fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_InitDriverPowerError (uint32_t instance, uint32_t driver, uint32_t state)
\details
The event \b InitDriverPowerError is generated when the MCI driver power control fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
  - \b state : power state (ARM_POWER_STATE).
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_InitMedia (uint32_t instance)
\details
The event \b InitMedia is generated on attempt to initialize the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaNotInitialized (uint32_t instance)
\details
The event \b MediaNotInitialized is generated on attempt to access non-initialized SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaCdActive (uint32_t instance)
\details
The event \b MediaCdActive is generated when media presence is detected using Card Detect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaCdInactive (uint32_t instance)
\details
The event \b MediaCdInactive is generated when media absence is detected using Card Detect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaWpActive (uint32_t instance)
\details
The event \b MediaWpActive is generated when media write protect activation is detected using Write Protect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaWpInactive (uint32_t instance)
\details
The event \b MediaWpInactive is generated when media write protect deactivation is detected using Write Protect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaReset (uint32_t instance)
\details
The event \b MediaReset is generated on attempt to reset the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaDetectionSD (uint32_t instance)
\details
The event \b MediaDetectionSD is generated at the beginning of the SD memory device detection procedure.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaSD_V2 (uint32_t instance)
\details
The event \b MediaSD_V2 is generated when SD memory device responds with the SD V2 response.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaReady (uint32_t instance, uint32_t ocr)
\details
The event \b MediaReady is generated when memory device power up status bit is set in the OCR register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b ocr : OCR content
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaNoResponse (uint32_t instance)
\details
The event \b MediaNoResponse is generated when memory device does not respond to the initialization command.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaDetectionMMC (uint32_t instance)
\details
The event \b MediaDetectionSD is generated at the beginning of the MMC/eMMC memory device detection procedure.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaDetectionError (uint32_t instance)
\details
The event \b MediaDetectionError is generated when \ref mc_control_layer is not able to detect the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_CidReadError (uint32_t instance)
\details
The event \b CidReadError is generated when \ref mc_control_layer is not able to read device CID register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_RcaReadError (uint32_t instance)
\details
The event \b RcaReadError is generated when \ref mc_control_layer is not able to read device RCA (Relative Card Address) register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_RcaWriteError (uint32_t instance)
\details
The event \b RcaWriteError is generated when \ref mc_control_layer is not able to write device RCA (Relative Card Address) register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_CsdReadError (uint32_t instance)
\details
The event \b CdsReadError is generated when \ref mc_control_layer is not able to read device CSD register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_TranStateError (uint32_t instance)
\details
The event \b TranStateError is generated when \ref mc_control_layer is not able to switch device state from STBY to TRAN.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_BlenWriteError (uint32_t instance, uint32_t blen)
\details
The event \b BlenWriteError is generated when \ref mc_control_layer is not able to set transfer block length.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b blen : block length.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_ExtCsdReadError (uint32_t instance)
\details
The event \b ExtCdsReadError is generated when \ref mc_control_layer is not able to read device EXT_CSD register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_HighSpeedSwitchError (uint32_t instance)
\details
The event \b HighSpeedSwitchError is generated when \ref mc_control_layer fails to switch bus speed to high-speed mode.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_DataBusSwitchError (uint32_t instance)
\details
The event \b DataBusSwitchError is generated when \ref mc_control_layer fails to switch bus data width.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_StbyStateError (uint32_t instance)
\details
The event \b StbyStateError is generated when \ref mc_control_layer fails to switch device state to STBY.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_InitSuccess (uint32_t instance)
\details
The event \b InitSuccess is generated when \ref mc_control_layer successfully initializes the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_UninitDriver (uint32_t instance, uint32_t driver)
\details
The event \b UninitDriver is generated on attempt to de-initialize the MCI driver.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_UninitMedia (uint32_t instance)
\details
The event \b UninitMedia is generated on attempt to de-initialize the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SectorRead (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorRead is generated on attempt to read sector from the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SectorReadError (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorReadError is generated when sector read from the SD/MMC/eMMC memory device fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SectorWrite (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorWrite is generated on attempt to write sector to the SD/MMC/eMMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SectorWriteError (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorWriteError is generated when sector write to the SD/MMC/eMMC memory device fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_TransferError (uint32_t instance, uint32_t events)
\details
The event \b TransferError is generated when data transfer is active and \ref mc_control_layer does not receive ARM_MCI_EVENT_TRANSFER_COMPLETE event from the MCI driver.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b events : CMSIS MCI driver events.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_TransferRetry (uint32_t instance, uint32_t retry)
\details
The event \b TransferRetry is generated when \ref mc_control_layer retries the data transfer operation.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b retry : retry count.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_ReadInfo (uint32_t instance)
\details
The event \b ReadInfo is generated on attempt to read the SD/MMC/eMMC device storage geometry properties.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_ReadInfoSuccess (uint32_t instance, uint32_t sect_count)
\details
The event \b ReadInfoSuccess is generated when the SD/MMC/eMMC device storage geometry properties are retrieved successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sect_count : number of sectors available on the device.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_DevCtrl (uint32_t instance, uint32_t code, uint32_t p)
\details
The event \b DevCtrl is generated when \ref fsDevCtrlCode "control code" is sent directly to \ref mc_control_layer.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
  - \b p : memory address of the control code parameter.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_DevCtrlUnsupported (uint32_t instance, uint32_t code)
\details
The event \b DevCtrlUnsupported is generated whenever an unsupported \ref fsDevCtrlCode "control code" is used.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_LockUnlockExec (uint32_t instance)
\details
The event \b LockUnlockExec is generated on attempt to execute the SD/MMC/eMMC LOCK/UNLOCK command.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_LockUnlockExecError (uint32_t instance)
\details
The event \b LockUnlockExecError is generated when the SD/MMC/eMMC LOCK/UNLOCK command execution fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_LockActive (uint32_t instance)
\details
The event \b LockActive is generated when \ref mc_control_layer activates password protection and the SD/eMMC LOCK command executes successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_LockDeactivated (uint32_t instance)
\details
The event \b LockDeactivated is generated when \ref mc_control_layer deactivates password protection and the SD/eMMC UNLOCK command executes successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_DeviceStateUnknown (uint32_t instance, uint32_t state)
\details
The event \b DeviceStateUnknown is generated when \ref mc_control_layer detects unknown SD/MMC/eMMC device state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b state : current device state (R1 response).
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_DeviceStateInvalid (uint32_t instance, uint32_t state)
\details
The event \b DeviceStateInvalid is generated when \ref mc_control_layer detects invalid SD/MMC/eMMC device state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b state : current device state (R1 response).
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_DeviceStateTimeout (uint32_t instance, uint32_t cstate, uint32_t nstate)
\details
The event \b DeviceStateTimeout is generated when \ref mc_control_layer operation timed-out while waiting for the SD/MMC/eMMC device state transition.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b cstate : current device state (R1 response).
  - \b nstate : expected device state.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_TransferAbort (uint32_t instance)
\details
The event \b TransferAbort is generated when \ref mc_control_layer detects invalid SD/MMC/eMMC device state and aborts the MCI driver data transfer.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SleepAwakeControl (uint32_t instance)
\details
The event \b SleepAwakeControl is generated on attempt to execute the eMMC SLEEP command.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SleepActive (uint32_t instance)
\details
The event \b SleepActive is generated when \ref mc_control_layer activates eMMC SLEEP state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_AwakeActive (uint32_t instance)
\details
The event \b AwakeActive is generated when \ref mc_control_layer deactivates eMMC SLEEP state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_CardPowerControl (uint32_t instance, uint32_t voltage)
\details
The event \b CardPowerControl is generated when \ref mc_control_layer controls MCI driver card power.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b voltage : MCI Card Power.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_SendCommandError (uint32_t instance, uint32_t cmd, uint32_t arg)
\details
The event \b SendCommandError is generated when MCI driver fails to send the command to the SD/MMC/eMMC device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b cmd : command index.
  - \b arg : command argument.
*/

/**                                                                        
\fn  __STATIC_INLINE void EvrFsMcMCI_ReadXferSetupError (uint32_t instance, uint8_t *buf, uint32_t cnt, uint32_t size)
\details
The event \b ReadXferSetupError is generated when MCI driver fails to setup the read transfer parameters.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b buf : data buffer address.
  - \b cnt : number of blocks to transfer.
  - \b size : block size.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_WriteXferSetupError (uint32_t instance, uint8_t *buf, uint32_t cnt, uint32_t size)
\details
The event \b WriteXferSetupError is generated when MCI driver fails to setup the write transfer parameters.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b buf : data buffer address.
  - \b cnt : number of blocks to transfer.
  - \b size : block size.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_ParameterInvalid (uint32_t instance)
\details
The event \b ParameterInvalid is generated when \ref mc_control_layer detects invalid function parameter.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcMCI_MediaPasswordEnabled (uint32_t instance)
\details
The event \b MediaPasswordEnabled is generated on attempt to access the SD/MMC/eMMC device while the password protection is still active.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/
/**
@}
*/
/* end group evr_fsmcmci */

/**
\defgroup evr_fsmcspi FsMcSPI: Memory Card SPI
\brief    Events generated by File System - Memory Card SPI functions
\details
FileSystem - Memory Card SPI
@{
*/
/**
\fn  __STATIC_INLINE void EvrFsMcSPI_InitDriver (uint32_t instance, uint32_t driver)
\details
The event \b InitDriver is generated on attempt to initialize the SPI driver.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_InitDriverSuccess (uint32_t instance, uint32_t driver)
\details
The event \b InitDriverSuccess is generated when SPI driver is initialized successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_InitDriverError (uint32_t instance, uint32_t driver)
\details
The event \b InitDriverError is generated when the SPI driver initialization fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_InitDriverPowerError (uint32_t instance, uint32_t driver, uint32_t state)
\details
The event \b InitDriverPowerError is generated when the SPI driver power control fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
  - \b state : power state (ARM_POWER_STATE).
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_InitMedia (uint32_t instance)
\details
The event \b InitMedia is generated on attempt to initialize the SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_InitMediaSuccess (uint32_t instance)
\details
The event \b InitMediaSuccess is generated when \ref mc_control_layer successfully initializes the SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaNotInitialized (uint32_t instance)
\details
The event \b MediaNotInitialized is generated on attempt to access non-initialized SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaCdActive (uint32_t instance)
\details
The event \b MediaCdActive is generated when media presence is detected using Card Detect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaCdInactive (uint32_t instance)
\details
The event \b MediaCdInactive is generated when media absence is detected using Card Detect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaWpActive (uint32_t instance)
\details
The event \b MediaWpActive is generated when media write protect activation is detected using Write Protect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaWpInactive (uint32_t instance)
\details
The event \b MediaWpInactive is generated when media write protect deactivation is detected using Write Protect pin state.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaReset (uint32_t instance)
\details
The event \b MediaReset is generated on attempt to reset the SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaResetError (uint32_t instance)
\details
The event \b MediaResetError is generated when SD/MMC memory device reset command fails. 

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaDetectionSD (uint32_t instance)
\details
The event \b MediaDetectionSD is generated at the beginning of the SD memory device detection procedure.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaSD_V2 (uint32_t instance)
\details
The event \b MediaSD_V2 is generated when SD memory device responds with the SD V2 response.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaReady (uint32_t instance, uint32_t ocr)
\details
The event \b MediaReady is generated when memory device power up status bit is set in the OCR register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b ocr : OCR content.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaNoResponse (uint32_t instance)
\details
The event \b MediaNoResponse is generated when memory device does not respond to the initialization command.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaDetectionMMC (uint32_t instance)
\details
The event \b MediaDetectionSD is generated at the beginning of the MMC memory device detection procedure.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaDetectionError (uint32_t instance)
\details
The event \b MediaDetectionError is generated when \ref mc_control_layer is not able to detect SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_CidReadError (uint32_t instance)
\details
The event \b CidReadError is generated when \ref mc_control_layer is not able to read device CID register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_CsdReadError (uint32_t instance)
\details
The event \b CdsReadError is generated when \ref mc_control_layer is not able to read device CSD register.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_BlenWriteError (uint32_t instance, uint32_t blen)
\details
The event \b BlenWriteError is generated when \ref mc_control_layer is not able to set transfer block length.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b blen : block length in bytes.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_UninitDriver (uint32_t instance, uint32_t driver)
\details
The event \b UninitDriver is generated on attempt to de-initialize the SPI driver.

\b Value of the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b driver : name of Software Component driver.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_UninitMedia (uint32_t instance)
\details
The event \b UninitMedia is generated on attempt to de-initialize the SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_SectorRead (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorRead is generated on attempt to read sector from the SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_SectorReadError (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorReadError is generated when sector read from the SD/MMC memory device fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors to read.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_SectorWrite (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorWrite is generated on attempt to write sector to the SD/MMC memory device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_SectorWriteError (uint32_t instance, uint32_t sector, uint32_t count)
\details
The event \b SectorWriteError is generated when sector write to the SD/MMC memory device fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sector : sector number.
  - \b count : number of sectors to write.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_ReadInfo (uint32_t instance)
\details
The event \b ReadInfo is generated on attempt to read the SD/MMC device storage geometry properties.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_ReadInfoSuccess (uint32_t instance, uint32_t sect_count)
\details
The event \b ReadInfoSuccess is generated when the SD/MMC device storage geometry properties are retrieved successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b sect_count: number of sectors available on the device.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_DevCtrl (uint32_t instance, uint32_t code, uint32_t p)
\details
The event \b DevCtrl is generated when \ref fsDevCtrlCode "control code" is sent directly to \ref mc_control_layer.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
  - \b p : memory address of the control code parameter.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_DevCtrlUnsupported (uint32_t instance, uint32_t code)
\details
The event \b DevCtrlUnsupported is generated whenever an unsupported \ref fsDevCtrlCode "control code" is used.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b code : string specifying the key name of the \ref fsDevCtrlCode "control code".
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_LockUnlockExec (uint32_t instance)
\details
The event \b LockUnlockExec is generated on attempt to execute the SD/MMC LOCK/UNLOCK command.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_LockUnlockExecError (uint32_t instance)
\details
The event \b LockUnlockExecError is generated when the SD/MMC LOCK/UNLOCK command execution fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_LockActive (uint32_t instance)
\details
The event \b LockActive is generated when \ref mc_control_layer activates password protection and the SD/MMC LOCK command executes successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_LockDeactivated (uint32_t instance)
\details
The event \b LockDeactivated is generated when \ref mc_control_layer deactivates password protection and the SD/MMC UNLOCK command executes successfully.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_BusSpeedControl (uint32_t instance, uint32_t speed)
\details
The event \b BusSpeedControl is generated on attempt to change SPI bus speed.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b speed : bus speed in Hz
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_SlaveSelCtrlMissing (uint32_t instance)
\details
The event \b SlaveSelCtrlMissing is generated when \ref mc_control_layer detects that Slave Select signal control is missing.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_ReadWpMissing (uint32_t instance)
\details
The event \b ReadWpMissing is generated when \ref mc_control_layer detects that Write Protect signal control is missing.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_ReadCdMissing (uint32_t instance)
\details
The event \b ReadCdMissing is generated when \ref mc_control_layer detects that Card Detect signal control is missing.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_CrcDisableError (uint32_t instance)
\details
The event \b CrcDisableError is generated when the SD/MMC CRC check disable command execution fails.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_DriverSendError (uint32_t instance, uint32_t event)
\details
The event \b DriverSendError is generated when the SPI driver Send function did not complete with ARM_SPI_EVENT_TRANSFER_COMPLETE event.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b event : CMSIS SPI driver events.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_DriverReceiveError (uint32_t instance, uint32_t event)
\details
The event \b DriverReceiveError is generated when the SPI driver Receive function did not complete with ARM_SPI_EVENT_TRANSFER_COMPLETE event.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b event : CMSIS SPI driver events.
*/

/**
\fn __STATIC_INLINE void EvrFsMcSPI_CmdSendError (uint32_t instance, uint32_t cmd, uint32_t arg)
\details
The event \b CmdSendError is generated when SPI driver fails to send the command to the SD/MMC device.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b cmd : command index.
  - \b arg : command argument.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_CmdResponseError (uint32_t instance, uint32_t cmd)
\details
The event \b CmdResponseError is generated when response to the last command is not received.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b cmd : command index.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_ACmdResponseError (uint32_t instance, uint32_t cmd)
\details
The event \b ACmdResponseError is generated when response to the last application command is not received.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
  - \b cmd : command index.
*/

/**
\fn __STATIC_INLINE void EvrFsMcSPI_ParameterInvalid (uint32_t instance)
\details
The event \b ParameterInvalid is generated when \ref mc_control_layer detects invalid function parameter.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/

/**
\fn  __STATIC_INLINE void EvrFsMcSPI_MediaPasswordEnabled (uint32_t instance)
\details
The event \b MediaPasswordEnabled is generated on attempt to access the SD/MMC device while the password protection is still active.

\b Value in the Event Recorder shows:
  - \b instance : number of Software Component instance.
*/
/**
@}
*/
/* end group evr_fsmcspi */

/**
@}
*/
/* end group evr_gr */
