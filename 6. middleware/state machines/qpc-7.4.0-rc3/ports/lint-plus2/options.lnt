//============================================================================
// QP/C Real-Time Embedded Framework (RTEF)
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// This software is dual-licensed under the terms of the open source GNU
// General Public License version 3 (or any later version), or alternatively,
// under the terms of one of the closed source Quantum Leaps commercial
// licenses.
//
// The terms of the open source GNU General Public License version 3
// can be found at: <www.gnu.org/licenses/gpl-3.0>
//
// The terms of the closed source Quantum Leaps commercial licenses
// can be found at: <www.state-machine.com/licensing>
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// Contact information:
// <www.state-machine.com>
// <info@state-machine.com>
//============================================================================
//! @date Last updated on: 2024-05-14
//! @version Last updated for version: 7.3.4
//!
//! @file
//! @brief PC-Lint-Plus option file for linting QP/C source code

//============================================================================
// general options
-unit_check        // perform only subset check (suppresses Global Wrapup)
-max_threads=1     // suppress message "no '-max_threads=N' option"
++efreeze(686)     // never suppress (see PC-Lint-Plus in Safety-Critical)
//-vf              // print names of all source files (for debugging linting)

// include directories
-i%PCLP%/lnt       // PC-Lint-Plus standard .lnt files
-i.                // QP/C port includes (see also qk/ and qv/)
-i%QPC%/include    // QP/C public includes

// standards
// language standard...
au-misra3.lnt      // MISRA-C:2023 (MC4) compliance
au-misra3-amd1.lnt // MISRA-C:2023 (MC4) compliance
au-misra3-amd2.lnt // MISRA-C:2023 (MC4) compliance
au-misra3-amd3.lnt // MISRA-C:2023 (MC4) compliance
au-misra3-amd4.lnt // MISRA-C:2023 (MC4) compliance

// customized BARR-C:2018 style guidelines
au-barr.lnt        // BARR-C:2018 style guidelines
-e8505 // suppress [Rule 6.1e] function contains uppercase letters
-e8511 // suppress [Rule 7.1f] variable contains uppercase letters
-e8512 // suppress [Rule 7.1j] global variable should have 'g' prefix
-e8510 // suppress [Rule 7.1e] variable contains less than 3 characters
-e8513 // suppress [Rule 7.1k] variable should have 'pp' prefix
-e8514 // suppress [Rule 7.1l] variable should have 'p' prefix
-e8515 // suppress [Rule 7.1m] boolean variable should have 'b' prefix
-e8526 // suppress [Rule 5.1a] typedef name should consist of lowercase letters
-e8527 // suppress [Rule 5.1a] typedef name should end with '_t' suffix
-e9209 // suppress [Rule 5.2c] plain char data used with prohibited operator &
-e8522 // suppress [Rule 8.6a] variable should appear on RHS of '==' operator

au-ds.lnt          // Dan Saks recommendations
cpu.lnt            // size/alignment options for the chosen CPU

// defined macros (might be undefined on command-line with -u<macro>)
-dQ_SPY
-dQ_UTEST

//============================================================================
// QP/C options for QP/C Applications
qpc.lnt            // QP/C options

//============================================================================
// additional suppression rules for building QP/C source code...

// QEP -----------------------------------------------------------------------

//! M4-D4.9(A) function-like macro
//! @tr{DVP-QP-MC4-D04_09A}
-esym(9026,
 QACTIVE_CAST_)

//! M4-D4.9(A) function-like macro
//! @tr{DVP-QP-MC4-D04_09B}
-esym(9026,
 QHSM_RESERVED_EVT_,
 QS_STATE_ENTRY_,
 QS_STATE_EXIT_)

//! M4-R11.5(A) conversion from pointer to void to other pointer
//! @tr{DVR-QP-MC4-R11_05}
-emacro(9079,
 Q_EVT_CAST)

//! M4-R8.13(A) parameter of function could be pointer to const
//! @tr{DVR-QP-MC4-R08_13}
-efunc(818,
 QMsm_isIn_)

// QF ------------------------------------------------------------------------

//! M4-D4.8(A) complete definition is unnecessary in this translation unit
//! @tr{DVP-QP-MC4-D04_08}
-efile(9045,
 -qp_pkg.h)

//! M4-D4.9(A) function-like macro
//! @tr{DVP-QP-MC4-D04_09A}
-esym(9026,
 QF_CRIT_ENTRY,
 QF_CRIT_EXIT,
 Q_ASSERT_INCRIT,
 Q_REQUIRE_INCRIT,
 Q_ENSURE_INCRIT,
 Q_INVARIANT_INCRIT,
 Q_ERROR_INCRIT,
 QF_SCHED_LOCK_,
 QF_SCHED_UNLOCK_,
 QF_ISR_CONTEXT_,
 QF_MPOOL_EL,
 Q_UINTPTR_CAST_)

//! M4-R8.13(A) parameter of function could be pointer to const
//! @tr{DVR-QP-MC4-R08_13}
-efunc(818,
 QActive_start_)

//! M4-R11.3(R) cast from pointer to object type
//! @tr{DVP-QP-MC4-R11_03B}
-emacro(9087,
 QACTIVE_CAST_)

//! M4-R11.3(R) cast from pointer to object type
//! @tr{DVP-QP-MC4-R11_03B}
-efunc(9087,
 QActive_ctor,
 QMActive_ctor)

//! M4-R11.4(A) conversion between object pointer type and integer type
//! @tr{DVR-QP-MC4-R11_04}
-emacro(9078,
 Q_UINTPTR_CAST_)

//! M4-R11.5(A) conversion from pointer to void to other pointer type
//! @tr{DVR-QP-MC4-R11_05}
-emacro(9079,
 QACTIVE_CAST_,
 QF_EPOOL_GET_)
-efunc(9079,
 QF_bzero_,
 QF_deleteRef_,
 QMPool_get,
 QMPool_put,
 QMPool_init,
 QTimeEvt_tick_,
 QTimeEvt_armX,
 QTimeEvt_rearm)

//! M4-R11.8(R) cast drops const qualifier
//! @tr{DVR-QP-MC4-R11_08}
-emacro(9005,
 QACTIVE_CAST_)
-efunc(9005,
 QEvt_refCtr_inc_,
 QEvt_refCtr_dec_,
 QF_gc)

//! M4-R15.5(A) return statement before end of function
//! @tr{DVP-QS-MC4-R15_05}
-efunc(904,
 QActive_post_,
 QActive_postLIFO_)

//! M4-R18.3(R) relational operator <= applied to pointers
//! @tr{DVR-QP-MC4-R18_03}
-efunc(946,
 QMPool_get,
 QMPool_put)

//! definition of macro ends in semicolon
//! @tr{DVR-QP-PCLP-823}
-esym(823,
 QF_CRIT_STAT,
 QF_SCHED_STAT_)

//! suspicious pointer-to-pointer conversion (area too small)
//! @tr{DVP-QP-PCLP-826}
-emacro(826,
 QACTIVE_CAST_)


// QV ------------------------------------------------------------------------

// QK ------------------------------------------------------------------------

//! M4-D4.9(A) function-like macro
//! @tr{DVP-QP-MC4-D04_09A}
-esym(9026,
 QK_ISR_CONTEXT_,
 QK_ISR_ENTRY,
 QK_ISR_EXIT)

// QXK -----------------------------------------------------------------------

//! M4-D4.9(A) function-like macro
//! @tr{DVP-QP-MC4-D04_09A}
-esym(9026,
 QXK_ISR_CONTEXT_,
 QXK_CONTEXT_SWITCH_,
 QXK_PTR_CAST_,
 QXTHREAD_CAST_,
 QXTHREAD_EQUEUE_SIGNAL_)

//! M4-R11.3(R) cast from pointer to object type
//! @tr{DVP-QP-MC4-R11_03B}
-emacro(9087,
 QXTHREAD_CAST_)

//! M4-R11.3(R) cast from pointer to object type
//! @tr{DVR-QP-MC4-R11_03C}
-emacro(9087,
 QXK_PTR_CAST_)

//! M4-R11.5(A) conversion from pointer to void to other pointer type
//! @tr{DVR-QP-MC4-R11_05}
-emacro(9079,
 QXK_PTR_CAST_)

//! MC3-R8.13(A) could be pointer to const
//! @tr{DVR-QP-MC4-R08_13}
-efunc(818,
 QXThread_init_,
 QXThread_dispatch_,
 QXThread_postLIFO_)

//! @tr{DVP-QP-PCLP-826}
-emacro(826,
 QXK_PTR_CAST_,
 QXTHREAD_CAST_)

//! cast increases required alignment from 2 to 4
//! @tr{DVR-QP-PCLP-2445}
-emacro(2445,
 QXK_PTR_CAST_)

// QS ------------------------------------------------------------------------
// the following options are needed only when Q_SPY is defined...

//! M4-D4.9(A) function-like macro
//! @tr{DVP-QS-MC4-D04_09A}
-esym(9026,
 QS_INSERT_BYTE_,
 QS_INSERT_ESC_BYTE_,
 QS_RX_TRAN_,
 QS_CRIT_ENTRY,
 QS_CRIT_EXIT)

//! M4-R8.13(A) parameter ... of function could be pointer to const
//! @tr{DVR-QS-MC4-R08_13}
-efunc(818,
 QHsmDummy_init_,
 QHsmDummy_dispatch_,
 QActiveDummy_start_,
 QActiveDummy_init_,
 QActiveDummy_dispatch_)

//! M4-R11.1(R) conversion between pointer to function and differing type
//! @tr{DVP-QS-MC4-R11_01}
-emacro(9074,
 QS_FUN_PRE_)
-efunc(9074,
 QS_getTestProbe_)

//! M4-R11.3(R) cast from pointer to object type
//! @tr{DVR-QS-MC4-R11_03C}
-efile(9087,
 -qs_rx.c,
 -qutest.c)

//! M4-R11.4(A) conversion between object pointer type and integer type
//! @tr{DVR-QS-MC4-R11_04}
-emacro(9078,
 QS_OBJ_PRE_,
 QS_FUN_PRE_)
-efunc(9078,
 QS_rxHandleGoodFrame_,
 QS_getTestProbe_)

//! M4-R11.5(A) conversion from pointer to void to other pointer type
//! @tr{DVR-QS-MC4-R11_05}
-efile(9079,
 -qs_rx.c,
 -qutest.c)

//! M4-R11.6(R) explicit cast from integer to 'void *'
//! @tr{DVR-QS-MC4-R11_06}
-emacro(923,
 QS_OBJ_PRE_,
 QS_FUN_PRE_)
-efunc(923,
 QS_rxHandleGoodFrame_,
 QS_getTestProbe_)

//! M4-R14.3(R) boolean condition for 'if' always evaluates to 'false'
//! @tr{DVR-QS-MC4-R14_03}
-emacro(774,
 QS_BEGIN_PRE_)

//! M4-R19.2(A) union declared
//! @tr{DVR-QS-MC4-R19_02}
-efunc(9018,
 QS_target_info_pre_,
 QS_f32_fmt_,
 QS_f64_fmt_)

//! constant value used in Boolean context (left operand to || operator)
//! @tr{DVR-QS-PCLP-506}
-emacro(506,
 QS_BEGIN_PRE_)

//! excessive shift value (precision 0 shifted right by ...)
//! @tr{DVR-QS-PCLP-572}
-emacro(572,
 QS_BEGIN_PRE_)

//! union initialization
//! @tr{DVR-QS-PCLP-708}
-efunc(708,
 QS_f64_fmt_)

//! union member not referenced
//! @tr{DVR-QS-PCLP-754}
-esym(754,
 Variant::aFlt,
 AFltVar::prio,
 *U32Rep::u32)

//! Constant expression evaluates to 0 in 'binary' operation '>>'
//! @tr{DVR-QS-PCLP-778}
-emacro(778,
 QS_BEGIN_PRE_)

//! suspicious pointer-to-pointer conversion (area too small)
//! @tr{DVR-QS-PCLP-818}
-efile(826,
 -qs_rx.c,
 -qutest.c)

//! definition of macro ends in semicolon
//! @tr{DVR-QS-PCLP-823}
-esym(823,
 QS_CRIT_STAT,
 QS_BEGIN_PRE_)

//! the right operand to << always evaluates to 0
//! @tr{DVR-QS-PCLP-845}
-emacro(845,
 QS_BEGIN_PRE_)

//! cast increases required alignment
//! @tr{DVP-QS-PCLP-2445}
-efunc(2445,
 QS_rxHandleGoodFrame_,
 QS_rxPoke_)

