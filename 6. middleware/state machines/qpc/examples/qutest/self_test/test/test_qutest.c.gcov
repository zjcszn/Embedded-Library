        -:    0:Source:test_qutest.c
        -:    0:Graph:build\test_qutest.gcno
        -:    0:Data:build\test_qutest.gcda
        -:    0:Runs:9
        -:    1:/*****************************************************************************
        -:    2:* Purpose: Fixture for QUTEST self-test
        -:    3:* Last Updated for Version: 6.9.3
        -:    4:* Date of the Last Update:  2021-05-31
        -:    5:*
        -:    6:*                    Q u a n t u m  L e a P s
        -:    7:*                    ------------------------
        -:    8:*                    Modern Embedded Software
        -:    9:*
        -:   10:* Copyright (C) 2005-2021 Quantum Leaps, LLC. All rights reserved.
        -:   11:*
        -:   12:* This program is open source software: you can redistribute it and/or
        -:   13:* modify it under the terms of the GNU General Public License as published
        -:   14:* by the Free Software Foundation, either version 3 of the License, or
        -:   15:* (at your option) any later version.
        -:   16:*
        -:   17:* Alternatively, this program may be distributed and modified under the
        -:   18:* terms of Quantum Leaps commercial licenses, which expressly supersede
        -:   19:* the GNU General Public License and are specifically designed for
        -:   20:* licensees interested in retaining the proprietary status of their code.
        -:   21:*
        -:   22:* This program is distributed in the hope that it will be useful,
        -:   23:* but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   24:* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
        -:   25:* GNU General Public License for more details.
        -:   26:*
        -:   27:* You should have received a copy of the GNU General Public License
        -:   28:* along with this program. If not, see <www.gnu.org/licenses>.
        -:   29:*
        -:   30:* Contact information:
        -:   31:* <www.state-machine.com/licensing>
        -:   32:* <info@state-machine.com>
        -:   33:*****************************************************************************/
        -:   34:#include "qpc.h" /* for QUTEST */
        -:   35:
        -:   36:Q_DEFINE_THIS_MODULE("test_qutest")
        -:   37:
        -:   38:/*--------------------------------------------------------------------------*/
        -:   39:static uint8_t buffer[100];
        -:   40:static uint32_t myFun(void);
        -:   41:
        -:   42:enum {
        -:   43:    FIXTURE_SETUP = QS_USER,
        -:   44:    FIXTURE_TEARDOWN,
        -:   45:    COMMAND_A,
        -:   46:    COMMAND_B,
        -:   47:    COMMAND_X,
        -:   48:    COMMAND_Y,
        -:   49:    COMMAND_Z,
        -:   50:    MY_RECORD,
        -:   51:};
        -:   52:
        -:   53:/*--------------------------------------------------------------------------*/
        9:   54:int main(int argc, char *argv[]) {
        -:   55:
        9:   56:    QF_init();  /* initialize the framework */
        9:   56-block  0
        -:   57:
        -:   58:    /* initialize the QS software tracing */
       9*:   59:    Q_ALLEGE(QS_INIT(argc > 1 ? argv[1] : (void *)0));
        9:   59-block  0
        9:   59-block  1
    %%%%%:   59-block  2
        -:   60:
        -:   61:    /* global filter */
        9:   62:    QS_GLB_FILTER(QS_ALL_RECORDS); /* enable all QS records */
        9:   62-block  0
        -:   63:
        -:   64:    /* dictionaries... */
        9:   65:    QS_OBJ_DICTIONARY(buffer);
        9:   66:    QS_FUN_DICTIONARY(&myFun);
        -:   67:
        9:   68:    QS_USR_DICTIONARY(FIXTURE_SETUP);
        9:   69:    QS_USR_DICTIONARY(FIXTURE_TEARDOWN);
        9:   70:    QS_USR_DICTIONARY(COMMAND_A);
        9:   71:    QS_USR_DICTIONARY(COMMAND_B);
        9:   72:    QS_USR_DICTIONARY(COMMAND_X);
        9:   73:    QS_USR_DICTIONARY(COMMAND_Y);
        9:   74:    QS_USR_DICTIONARY(COMMAND_Z);
        9:   75:    QS_USR_DICTIONARY(MY_RECORD);
        -:   76:
        9:   77:    return QF_run(); /* run the tests */
        -:   78:}
        -:   79:
        -:   80:/*--------------------------------------------------------------------------*/
       12:   81:void QS_onTestSetup(void) {
       12:   82:    QS_BEGIN_ID(FIXTURE_SETUP, 0U)
       12:   82-block  0
       12:   82-block  1
       12:   82-block  2
       12:   83:    QS_END()
       12:   84:}
        -:   85:/*..........................................................................*/
       12:   86:void QS_onTestTeardown(void) {
       12:   87:    QS_BEGIN_ID(FIXTURE_TEARDOWN, 0U)
       12:   87-block  0
       12:   87-block  1
       12:   87-block  2
       12:   88:    QS_END()
       12:   89:}
        -:   90:
        -:   91:/*..........................................................................*/
        -:   92:/*! callback function to execute user commands */
       14:   93:void QS_onCommand(uint8_t cmdId,
        -:   94:                  uint32_t param1, uint32_t param2, uint32_t param3)
        -:   95:{
       14:   96:    (void)param1;
       14:   97:    (void)param2;
       14:   98:    (void)param3;
        -:   99:
       14:  100:    switch (cmdId) {
       14:  100-block  0
        2:  101:        case COMMAND_A: {
        2:  102:            Q_ASSERT_ID(100, param1 != 0U);
        2:  102-block  0
        1:  102-block  1
        1:  103:            QS_BEGIN_ID(COMMAND_A, 0U) /* app-specific record */
        1:  103-block  0
        1:  103-block  1
        1:  103-block  2
        1:  104:                QS_U32(0, param1);
        1:  105:            QS_END()
        -:  106:            break;
        -:  107:        }
        1:  108:        case COMMAND_B: {
        1:  109:            QS_BEGIN_ID(COMMAND_B, 0U) /* app-specific record */
        1:  109-block  0
        1:  109-block  1
        1:  109-block  2
        1:  110:                QS_U8(0, param1);
        1:  111:                QS_STR("BAR");
        1:  112:                QS_U16(0, param2);
        1:  113:                QS_STR("FOO");
        1:  114:                QS_U32(0, param3);
        1:  115:                QS_F64(param1, -6.02214076E23);
        1:  116:            QS_END()
        -:  117:            break;
        -:  118:        }
        7:  119:        case COMMAND_X: {
        7:  120:            uint32_t x = myFun();
        7:  120-block  0
        7:  121:            QS_BEGIN_ID(COMMAND_X, 0U) /* app-specific record */
        7:  121-block  0
        7:  121-block  1
        7:  122:                QS_U32(0, x);
        -:  123:                /* ... */
        7:  124:            QS_END()
        -:  125:            break;
        -:  126:        }
        2:  127:        case COMMAND_Y: {
        2:  128:            QS_BEGIN_ID(COMMAND_Y, 0U) /* application-specific record */
        2:  128-block  0
        2:  128-block  1
        2:  128-block  2
        2:  129:                QS_FUN(&myFun);
        2:  130:                QS_MEM(buffer, param1);
        2:  131:                QS_STR((char const *)&buffer[33]);
        2:  132:            QS_END()
        -:  133:            break;
        -:  134:        }
        2:  135:        case COMMAND_Z: {
        2:  136:            float32_t f32 = (float32_t)((int32_t)param2/(float32_t)param3);
        2:  137:            float64_t f64 = -6.02214076E23;
        2:  138:            QS_BEGIN_ID(COMMAND_Z, 0U) /* app-specific record */
        2:  138-block  0
        2:  138-block  1
        2:  138-block  2
        2:  139:                QS_F32(param1, f32);
        2:  140:                QS_F64(param1, f64);
        2:  141:            QS_END()
        -:  142:            break;
        -:  143:        }
        -:  144:        default:
        -:  145:            break;
        -:  146:    }
       13:  147:}
        -:  148:
        -:  149:/*..........................................................................*/
        -:  150:/* host callback function to "massage" the event, if necessary */
    #####:  151:void QS_onTestEvt(QEvt *e) {
    #####:  152:    (void)e;
        -:  153:#ifdef Q_HOST  /* is this test compiled for a desktop Host computer? */
        -:  154:#else /* this test is compiled for an embedded Target system */
        -:  155:#endif
    #####:  156:}
        -:  157:/*..........................................................................*/
        -:  158:/*! callback function to output the posted QP events (not used here) */
    #####:  159:void QS_onTestPost(void const *sender, QActive *recipient,
        -:  160:                   QEvt const *e, bool status)
        -:  161:{
    #####:  162:    (void)sender;
    #####:  163:    (void)recipient;
    #####:  164:    (void)e;
    #####:  165:    (void)status;
    #####:  166:}
        -:  167:
        -:  168:/*--------------------------------------------------------------------------*/
        7:  169:static uint32_t myFun(void) {
        7:  170:    QS_TEST_PROBE_DEF(&myFun)
        7:  170-block  0
        7:  171:    QS_TEST_PROBE(
        -:  172:        return qs_tp_;
        -:  173:    )
        -:  174:    return 0;
        -:  175:}
        -:  176:
