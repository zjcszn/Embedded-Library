# docs at https://docs.zephyrproject.org/latest/reference/kconfig/index.html

# IMPORTANT: if you change any of the values here you may want to change
# the values in the other "runner_xxx" directories also

CONFIG_DEBUG=y
CONFIG_MINIMAL_LIBC=y
# ubxlib does not need anything like this much heap, this is simply
# a suggestion for your application, feel free to override it.
CONFIG_HEAP_MEM_POOL_SIZE=131072
CONFIG_USERSPACE=y

CONFIG_MINIMAL_LIBC_MALLOC=n

# Enable ubxlib
CONFIG_UBXLIB=y
# Compile ubxlib unity tests
CONFIG_UBXLIB_TEST=y

# Note: no on-board BLE on STM32F7

# To get uPortTaskStackMinFree() working
CONFIG_INIT_STACKS=y
CONFIG_THREAD_STACK_INFO=y
CONFIG_THREAD_NAME=y

# Obviously interrupt driven UART
CONFIG_UART_INTERRUPT_DRIVEN=y

# To be able to use semaphore from ISR
CONFIG_IRQ_OFFLOAD=y

# Sufficient main stack to pass all tests and leave
# 5 kbytes slack for user code
CONFIG_MAIN_STACK_SIZE=8192

# Add the basic Zephyr random number generator.
# IMPORTANT: this is only psuedo-random and is unlikely
# to be  sufficient for your needs, please check/test
# if you are intending to build production code.
CONFIG_TEST_RANDOM_GENERATOR=y
CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR=y

# Make it possible to write and execute from RAM for libCommon
CONFIG_EXECUTE_XOR_WRITE=n

# Don't hide any potential errors
CONFIG_ASSERT=y

# Normally we would log output through SWO via OpenOCD,
# however, even though there is support in the compiled
# target for that (CONFIG_LOG_BACKEND_SWO=y,
# CONFIG_LOG_MODE_IMMEDIATE=y) there is no support in
# west debug to capture logging from SWO, hence Zephyr
# STM32 users would be less likely to choose that route;
# all of which means we stick with console logging
CONFIG_UART_CONSOLE=y

# These are needed for our thread dumper
CONFIG_EXTRA_EXCEPTION_INFO=y
CONFIG_THREAD_MONITOR=y

# Enable I2C
CONFIG_I2C=y

# Enable SPI
CONFIG_SPI=y

# From Zephyr 3.7.0, the asynchronous UART API, which we use
# with STM32F7 as it is the only way to enable DMA and avoid
# character loss with the single-byte UART buffers on that
# platform, requires UART buffers to be in non-cached RAM.
# There are some frightening device tree gymnastics to make
# that happen, which end up mixing what is internal ubxlib
# code with application behaviour, so for now we disable
# DCACHE here.  This should probably be looked at.
CONFIG_DCACHE=n

# Enable PPP-level integration with the bottom of the Zephyr IP stack
CONFIG_NETWORKING=y
CONFIG_NET_DRIVERS=y
CONFIG_NET_IPV4=y
# The cellular module will reject IPCPV6 negotiation (since it does not have an IPV6 addres) so switch it off
CONFIG_NET_IPV6=n
CONFIG_PPP_NET_IF_NO_AUTO_START=y
CONFIG_NET_PPP=y
CONFIG_NET_L2_PPP=y
CONFIG_NET_L2_PPP_PAP=y
# Without this LCP negotiation falls at the first hurdle (the value is in milliseconds)
CONFIG_NET_L2_PPP_TIMEOUT=10000
CONFIG_NET_PPP_ASYNC_UART=y
CONFIG_UART_ASYNC_API=y
CONFIG_NET_PPP_UART_BUF_LEN=512
CONFIG_NET_PPP_ASYNC_UART_TX_BUF_LEN=512
# We pass a reasonable amount of data around during testing, hence need to increase this
CONFIG_NET_PPP_RINGBUF_SIZE=1024

# For the Zephyr native sockets test and example
CONFIG_NET_TCP=y
# Since the PPP link is relatively slow, keep the window size small
CONFIG_NET_TCP_MAX_SEND_WINDOW_SIZE=256
CONFIG_NET_TCP_MAX_RECV_WINDOW_SIZE=256
CONFIG_NET_SOCKETS=y

# Sufficient TCP buffers to run the amount of data we send and receive in the native zephyr sockets test, zephyrSockTcp
CONFIG_NET_BUF_DATA_SIZE=256

# Uncomment these for detailed PPP debug
#CONFIG_NET_LOG=y
#CONFIG_NET_L2_PPP_LOG_LEVEL_DBG=y
#CONFIG_NET_PPP_LOG_LEVEL_DBG=y